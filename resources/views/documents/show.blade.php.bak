@extends('layouts.user-layout')

@section('title', $document->act_name ?? 'Legal Document')

@section('content')
<div class="container-fluid">
    <div class="row">
        <!-- Left sidebar with document navigation -->
        <div class="col-md-3 sidebar">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Document Navigation</h5>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush" id="document-nav">
                        <!-- Navigation items will be populated by JavaScript -->
                    </div>
                </div>
            </div>
            
            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">Your Notes</h5>
                </div>
                <div class="card-body">
                    <div id="user-notes-list">
                        <!-- User notes will be populated by JavaScript -->
                        <div class="text-center text-muted py-3">
                            <i class="fas fa-sticky-note fa-2x mb-2"></i>
                            <p>Click on a section to add notes</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Main content area -->
        <div class="col-md-9">
            <div class="card shadow-sm mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>{{ $document->act_name ?? 'Document' }}</h4>
                    <div>
                        <button class="btn btn-sm btn-outline-primary" id="toggle-notes">
                            <i class="fas fa-sticky-note"></i> Toggle Notes
                        </button>
                        <button class="btn btn-sm btn-outline-primary" id="toggle-highlights">
                            <i class="fas fa-highlighter"></i> Toggle Highlights
                        </button>
                        <div class="dropdown d-inline-block">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" id="optionsDropdown" data-bs-toggle="dropdown">
                                <i class="fas fa-cog"></i> Options
                            </button>
                            <div class="dropdown-menu dropdown-menu-end" aria-labelledby="optionsDropdown">
                                <a class="dropdown-item" href="{{ route('documents.download', $document->id) }}">
                                    <i class="fas fa-download"></i> Download Document
                                </a>
                                <a class="dropdown-item" href="#" id="print-document">
                                    <i class="fas fa-print"></i> Print Document
                                </a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#" id="expand-all">
                                    <i class="fas fa-expand-arrows-alt"></i> Expand All Sections
                                </a>
                                <a class="dropdown-item" href="#" id="collapse-all">
                                    <i class="fas fa-compress-arrows-alt"></i> Collapse All Sections
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card-body">
                    <!-- Document header information -->
                    <div class="document-header mb-4">
                        <h2 class="text-center">{{ $document->act_name }}</h2>
                        <div class="text-center text-muted mb-3">
                            <span class="badge bg-primary">{{ $document->law_id }}</span>
                            <span class="badge bg-secondary">{{ $document->act_id }}</span>
                            <span class="badge bg-info">{{ $document->jurisdiction_id }}</span>
                        </div>
                    </div>
                    
                    <!-- Document search and navigation -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Search within document..." id="document-search">
                                <button class="btn btn-primary" id="search-btn">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex justify-content-end" id="pagination-controls">
                                <!-- Pagination will be added here -->
                            </div>
                        </div>
                    </div>
                    
                    <!-- Main document content -->
                    <div id="document-content" class="legal-document">
                        <!-- Content will be loaded dynamically -->
                        <div class="text-center py-5" id="loading-indicator">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading document content...</p>
                        </div>
                    </div>
                </div>
                
                <div class="card-footer">
                    <div class="d-flex justify-content-between">
                        <button id="prev-section" class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left"></i> Previous Section
                        </button>
                        <button id="next-section" class="btn btn-outline-secondary">
                            Next Section <i class="fas fa-arrow-right"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Section content popup modal -->
<div class="modal fade" id="sectionModal" tabindex="-1" aria-labelledby="sectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sectionModalLabel">Section Content</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="section-modal-content">
                <!-- Section content will be loaded here -->
            </div>
            <div class="modal-footer">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-success" id="add-note-btn">
                        <i class="fas fa-sticky-note"></i> Add Note
                    </button>
                    <button type="button" class="btn btn-outline-warning" id="highlight-btn">
                        <i class="fas fa-highlighter"></i> Highlight
                    </button>
                    <button type="button" class="btn btn-outline-primary" id="pin-section-btn">
                        <i class="fas fa-thumbtack"></i> Pin Section
                    </button>
                </div>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Note editor modal -->
<div class="modal fade" id="noteModal" tabindex="-1" aria-labelledby="noteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="noteModalLabel">Add Note</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="note-form">
                    <input type="hidden" id="note-section-id" name="section_id" value="">
                    <input type="hidden" id="note-table" name="document_table" value="{{ $document->table_name }}">
                    <input type="hidden" id="note-type" name="text_type" value="note">
                    
                    <div class="mb-3">
                        <label for="note-content" class="form-label">Your Note</label>
                        <textarea class="form-control" id="note-content" name="text_content" rows="5" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="save-note-btn">Save Note</button>
            </div>
        </div>
    </div>
</div>
@endsection

@push('styles')
<style>
    .sidebar {
        height: calc(100vh - 100px);
        overflow-y: auto;
    }
    
    .legal-document {
        font-family: 'Times New Roman', Times, serif;
        line-height: 1.6;
    }
    
    .legal-document h1, .legal-document h2, .legal-document h3 {
        margin-top: 1.5rem;
        margin-bottom: 1rem;
    }
    
    .legal-document p {
        margin-bottom: 1rem;
        text-align: justify;
    }
    
    .section {
        padding: 0.5rem;
        margin-bottom: 1rem;
        border-left: 3px solid #eee;
    }
    
    .section:hover {
        background-color: #f8f9fa;
        border-left-color: #007bff;
    }
    
    .section-id {
        font-weight: bold;
        color: #495057;
    }
    
    .section-title {
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .section-content {
        margin-left: 1rem;
    }
    
    .ref {
        color: #007bff;
        cursor: pointer;
        text-decoration: underline;
    }
    
    .ref:hover {
        color: #0056b3;
    }
    
    .highlighted {
        background-color: #fff3cd;
        padding: 2px;
    }
    
    .note-indicator {
        display: inline-block;
        background-color: #ffc107;
        color: #212529;
        font-size: 0.75rem;
        padding: 0.2rem 0.4rem;
        border-radius: 50%;
        margin-left: 0.5rem;
        cursor: pointer;
    }
    
    .pinned-section {
        background-color: #e3f2fd;
        border-left-color: #007bff;
    }
    
    #document-nav .active {
        background-color: #e9ecef;
        border-color: #dee2e6;
    }
    
    #user-notes-list .note-item {
        padding: 0.75rem;
        margin-bottom: 0.5rem;
        background-color: #fff9e6;
        border-left: 3px solid #ffc107;
        font-size: 0.9rem;
    }
    
    #user-notes-list .note-section {
        font-weight: bold;
        margin-bottom: 0.25rem;
    }
    
    #user-notes-list .note-content {
        color: #495057;
    }
    
    #user-notes-list .note-date {
        font-size: 0.8rem;
        color: #6c757d;
        text-align: right;
    }
</style>
@endpush

@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const documentId = {{ $document->id }};
        const tableName = "{{ $document->table_name }}";
        let currentPage = 1;
        let totalPages = 1;
        let currentSection = null;
        let sections = [];
        
        // Initial document load
        loadDocument(1);
        
        // Load the document content for a specific page
        function loadDocument(page) {
            // Show loading indicator
            document.getElementById('loading-indicator').style.display = 'block';
            document.getElementById('document-content').innerHTML = '';
            
            // Fetch document content via AJAX
            fetch(`/api/documents/${documentId}/content?page=${page}`)
                .then(response => response.json())
                .then(data => {
                    // Hide loading indicator
                    document.getElementById('loading-indicator').style.display = 'none';
                    
                    // Update pagination
                    currentPage = page;
                    totalPages = data.totalPages || 1;
                    updatePagination();
                    
                    // Store sections data
                    sections = data.sections || [];
                    
                    // Render document content
                    renderDocument(sections);
                    
                    // Update navigation sidebar
                    updateNavigation(sections);
                })
                .catch(error => {
                    console.error('Error loading document:', error);
                    document.getElementById('loading-indicator').style.display = 'none';
                    document.getElementById('document-content').innerHTML = 
                        '<div class="alert alert-danger">Error loading document content. Please try again.</div>';
                });
        }
        
        // Render the document content from sections data
        function renderDocument(sections) {
            const contentContainer = document.getElementById('document-content');
            contentContainer.innerHTML = '';
            
            if (!sections || sections.length === 0) {
                contentContainer.innerHTML = '<div class="alert alert-info">No content available for this document.</div>';
                return;
            }
            
            // Group sections by part/division if applicable
            const parts = {};
            const standaloneItems = [];
            
            sections.forEach(section => {
                if (section.part) {
                    if (!parts[section.part]) {
                        parts[section.part] = {
                            title: section.part_title || `Part ${section.part}`,
                            sections: []
                        };
                    }
                    parts[section.part].sections.push(section);
                } else {
                    standaloneItems.push(section);
                }
            });
            
            // Render parts and their sections
            for (const [partId, part] of Object.entries(parts)) {
                const partDiv = document.createElement('div');
                partDiv.className = 'part mb-4';
                partDiv.innerHTML = `
                    <h2 class="part-title">Part ${partId}: ${part.title}</h2>
                    <div class="part-content"></div>
                `;
                
                const partContent = partDiv.querySelector('.part-content');
                part.sections.forEach(section => {
                    partContent.appendChild(createSectionElement(section));
                });
                
                contentContainer.appendChild(partDiv);
            }
            
            // Render standalone sections
            standaloneItems.forEach(section => {
                contentContainer.appendChild(createSectionElement(section));
            });
            
            // Add click handlers for reference links
            setupReferenceLinks();
        }
        
        // Create a section element from section data
        function createSectionElement(section) {
            const sectionDiv = document.createElement('div');
            sectionDiv.className = 'section';
            sectionDiv.dataset.sectionId = section.id;
            sectionDiv.dataset.sectionNumber = section.section || '';
            
            // Build section header
            let header = '';
            if (section.section) {
                header += `<span class="section-id">${section.section}</span> `;
            }
            if (section.title) {
                header += `<span class="section-title">${section.title}</span>`;
            }
            
            // Add section content
            let content = section.text_content || '';
            
            // Process content for references
            content = processReferences(content);
            
            // Check if this section has notes
            const hasNotes = section.hasNotes || false;
            const noteIndicator = hasNotes ? 
                `<span class="note-indicator" title="You have notes for this section">N</span>` : '';
            
            sectionDiv.innerHTML = `
                <div class="section-header" role="button">
                    ${header} ${noteIndicator}
                </div>
                <div class="section-content">
                    ${content}
                </div>
            `;
            
            // Add click handler to open popup
            sectionDiv.addEventListener('click', function(e) {
                // Don't trigger if clicking on a reference link
                if (e.target.classList.contains('ref')) {
                    return;
                }
                
                openSectionPopup(section);
            });
            
            return sectionDiv;
        }
        
        // Process text to identify and make references clickable
        function processReferences(text) {
            if (!text) return '';
            
            // Pattern 1: section X or subsection Y
            text = text.replace(/\b(section|subsection|paragraph)\s+(\d+(?:\.\d+)?(?:\([a-z0-9.]+\))*)/gi, 
                '<span class="ref section-ref" data-section-id="$2">$1 $2</span>');
                
            // Pattern 2: paragraphs (a) and (b)
            text = text.replace(/\b(paragraph|paragraphs)\s+\(([a-z0-9.]+)\)(\s+and\s+\(([a-z0-9.]+)\))?/gi,
                '<span class="ref paragraph-ref" data-paragraph-id="$2">$1 ($2)</span>$3');
                
            return text;
        }
        
        // Set up click handlers for reference links
        function setupReferenceLinks() {
            document.querySelectorAll('.ref').forEach(ref => {
                ref.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Find the referenced section
                    let targetId = '';
                    if (this.classList.contains('section-ref')) {
                        targetId = this.dataset.sectionId;
                    } else if (this.classList.contains('paragraph-ref')) {
                        // Handle paragraph references
                        // This would need more complex logic based on your data structure
                    }
                    
                    if (targetId) {
                        navigateToSection(targetId);
                    }
                });
            });
        }
        
        // Navigate to a specific section
        function navigateToSection(sectionId) {
            // First try to find it on the current page
            const sectionElement = document.querySelector(`.section[data-section-number="${sectionId}"]`);
            
            if (sectionElement) {
                // Scroll to section
                sectionElement.scrollIntoView({ behavior: 'smooth' });
                sectionElement.classList.add('highlight-pulse');
                setTimeout(() => sectionElement.classList.remove('highlight-pulse'), 2000);
            } else {
                // Need to search for the section on other pages
                // This would require an API endpoint to find which page contains the section
                alert(`Navigating to section ${sectionId} - this would search across pages in a full implementation`);
            }
        }
        
        // Update the pagination controls
        function updatePagination() {
            const paginationControls = document.getElementById('pagination-controls');
            
            if (totalPages <= 1) {
                paginationControls.innerHTML = '';
                return;
            }
            
            let html = '<div class="btn-group">';
            
            // Previous button
            const prevDisabled = currentPage <= 1 ? 'disabled' : '';
            html += `<button class="btn btn-sm btn-outline-secondary ${prevDisabled}" data-page="${currentPage - 1}">
                <i class="fas fa-chevron-left"></i>
            </button>`;
            
            // Page select
            html += `<select class="form-select form-select-sm" style="width: auto;">`;
            for (let i = 1; i <= totalPages; i++) {
                const selected = i === currentPage ? 'selected' : '';
                html += `<option value="${i}" ${selected}>Page ${i} of ${totalPages}</option>`;
            }
            html += `</select>`;
            
            // Next button
            const nextDisabled = currentPage >= totalPages ? 'disabled' : '';
            html += `<button class="btn btn-sm btn-outline-secondary ${nextDisabled}" data-page="${currentPage + 1}">
                <i class="fas fa-chevron-right"></i>
            </button>`;
            
            html += '</div>';
            
            paginationControls.innerHTML = html;
            
            // Add event listeners
            const pageSelect = paginationControls.querySelector('select');
            pageSelect.addEventListener('change', () => {
                loadDocument(parseInt(pageSelect.value));
            });
            
            paginationControls.querySelectorAll('button').forEach(button => {
                if (!button.disabled) {
                    button.addEventListener('click', () => {
                        loadDocument(parseInt(button.dataset.page));
                    });
                }
            });
        }
        
        // Update the navigation sidebar
        function updateNavigation(sections) {
            const nav = document.getElementById('document-nav');
            nav.innerHTML = '';
            
            // Create a hierarchical structure for navigation
            const parts = {};
            const topLevelSections = [];
            
            sections.forEach(section => {
                if (section.part) {
                    if (!parts[section.part]) {
                        parts[section.part] = {
                            title: section.part_title || `Part ${section.part}`,
                            sections: []
                        };
                    }
                    parts[section.part].sections.push(section);
                } else if (section.section) {
                    topLevelSections.push(section);
                }
            });
            
            // Add parts to navigation
            for (const [partId, part] of Object.entries(parts)) {
                const partItem = document.createElement('div');
                partItem.className = 'list-group-item list-group-item-action d-flex justify-content-between align-items-center';
                partItem.innerHTML = `
                    <span>Part ${partId}: ${part.title}</span>
                    <i class="fas fa-chevron-down"></i>
                `;
                
                const partContent = document.createElement('div');
                partContent.className = 'list-group ms-3';
                partContent.style.display = 'none';
                
                part.sections.forEach(section => {
                    if (section.section) {
                        const sectionItem = document.createElement('a');
                        sectionItem.href = '#';
                        sectionItem.className = 'list-group-item list-group-item-action border-0 py-1 small';
                        sectionItem.dataset.sectionId = section.id;
                        sectionItem.textContent = `Section ${section.section}`;
                        
                        sectionItem.addEventListener('click', function(e) {
                            e.preventDefault();
                            navigateToSection(section.section);
                        });
                        
                        partContent.appendChild(sectionItem);
                    }
                });
                
                partItem.addEventListener('click', function() {
                    const icon = this.querySelector('i');
                    if (partContent.style.display === 'none') {
                        partContent.style.display = 'block';
                        icon.classList.remove('fa-chevron-down');
                        icon.classList.add('fa-chevron-up');
                    } else {
                        partContent.style.display = 'none';
                        icon.classList.remove('fa-chevron-up');
                        icon.classList.add('fa-chevron-down');
                    }
                });
                
                nav.appendChild(partItem);
                nav.appendChild(partContent);
            }
            
            // Add top-level sections to navigation
            topLevelSections.forEach(section => {
                const sectionItem = document.createElement('a');
                sectionItem.href = '#';
                sectionItem.className = 'list-group-item list-group-item-action';
                sectionItem.dataset.sectionId = section.id;
                sectionItem.textContent = section.section ? `Section ${section.section}` : (section.title || `Item ${section.id}`);
                
                sectionItem.addEventListener('click', function(e) {
                    e.preventDefault();
                    navigateToSection(section.section);
                });
                
                nav.appendChild(sectionItem);
            });
        }
        
        // Open the section popup modal
        function openSectionPopup(section) {
            currentSection = section;
            
            const modal = new bootstrap.Modal(document.getElementById('sectionModal'));
            const modalTitle = document.getElementById('sectionModalLabel');
            const modalContent = document.getElementById('section-modal-content');
            
            // Set modal title
            let title = '';
            if (section.section) {
                title += `Section ${section.section}`;
                if (section.title) {
                    title += `: ${section.title}`;
                }
            } else if (section.title) {
                title = section.title;
            } else {
                title = `Document Section`;
            }
            modalTitle.textContent = title;
            
            // Set modal content
            let content = section.text_content || 'No content available for this section.';
            content = processReferences(content);
            
            modalContent.innerHTML = `
                <div class="section-info mb-3">
                    <div class="mb-2"><strong>Document:</strong> ${tableName}</div>
                    ${section.part ? `<div class="mb-2"><strong>Part:</strong> ${section.part}</div>` : ''}
                    ${section.division ? `<div class="mb-2"><strong>Division:</strong> ${section.division}</div>` : ''}
                    ${section.section ? `<div class="mb-2"><strong>Section:</strong> ${section.section}</div>` : ''}
                </div>
                <div class="section-text">${content}</div>
            `;
            
            // Load user notes for this section
            loadSectionNotes(section.id);
            
            // Setup modal button handlers
            document.getElementById('add-note-btn').onclick = function() {
                openNoteModal(section);
            };
            
            document.getElementById('highlight-btn').onclick = function() {
                toggleHighlight(section);
            };
            
            document.getElementById('pin-section-btn').onclick = function() {
                pinSection(section);
            };
            
            // Show the modal
            modal.show();
            
            // Setup reference links in the popup
            setTimeout(() => {
                setupReferenceLinks();
            }, 100);
        }
        
        // Load notes for a specific section
        function loadSectionNotes(sectionId) {
            // This would fetch notes from your backend
            fetch(`/api/annotations/section?document_table=${tableName}&document_section_id=${sectionId}`)
                .then(response => response.json())
                .then(data => {
                    // Update the notes in the modal
                    const notes = data.notes || [];
                    if (notes.length > 0) {
                        const notesHtml = notes.map(note => `
                            <div class="user-note mb-3 p-2 border-left border-warning bg-light">
                                <div class="note-meta d-flex justify-content-between mb-1">
                                    <span class="badge bg-warning">${note.text_type}</span>
                                    <small class="text-muted">${new Date(note.created_at).toLocaleString()}</small>
                                </div>
                                <div class="note-content">${note.text_content}</div>
                            </div>
                        `).join('');
                        
                        document.getElementById('section-modal-content').insertAdjacentHTML(
                            'beforeend', 
                            `<div class="section-notes mt-4">
                                <h5>Your Notes</h5>
                                ${notesHtml}
                            </div>`
                        );
                    }
                })
                .catch(error => {
                    console.error('Error loading section notes:', error);
                });
        }
        
        // Open the note modal for adding a note
        function openNoteModal(section) {
            const noteModal = new bootstrap.Modal(document.getElementById('noteModal'));
            
            // Set form values
            document.getElementById('note-section-id').value = section.id;
            document.getElementById('note-content').value = '';
            
            // Setup save button
            document.getElementById('save-note-btn').onclick = function() {
                saveNote();
            };
            
            noteModal.show();
        }
        
        // Save a note
        function saveNote() {
            const form = document.getElementById('note-form');
            const formData = new FormData(form);
            
            // Convert FormData to JSON
            const noteData = {};
            formData.forEach((value, key) => {
                noteData[key] = value;
            });
            
            // Send note to backend
            fetch('/api/annotations', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify(noteData)
            })
            .then(response => response.json())
            .then(data => {
                // Close the note modal
                bootstrap.Modal.getInstance(document.getElementById('noteModal')).hide();
                
                // Refresh the section popup
                if (currentSection) {
                    openSectionPopup(currentSection);
                }
                
                // Show success message
                alert('Note saved successfully!');
            })
            .catch(error => {
                console.error('Error saving note:', error);
                alert('Error saving note. Please try again.');
            });
        }
        
        // Toggle highlight for a section
        function toggleHighlight(section) {
            // This would be implemented to save highlights in your database
            alert(`Highlight toggled for section ${section.id}`);
        }
        
        // Pin a section for quick access
        function pinSection(section) {
            // This would be implemented to save pinned sections in your database
            const pinnedData = {
                user_id: {{ auth()->id() }},
                category_id: {{ $document->id }},
                section_id: section.id,
                section_title: section.title || `Section ${section.section}`,
                popup_content: section.text_content,
                table_name: tableName
            };
            
            fetch('/api/pinned-sections', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify(pinnedData)
            })
            .then(response => response.json())
            .then(data => {
                alert('Section pinned successfully!');
            })
            .catch(error => {
                console.error('Error pinning section:', error);
                alert('Error pinning section. Please try again.');
            });
        }
        
        // Document search functionality
        document.getElementById('search-btn').addEventListener('click', function() {
            const searchTerm = document.getElementById('document-search').value.trim();
            if (searchTerm) {
                searchInDocument(searchTerm);
            }
        });
        
        document.getElementById('document-search').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const searchTerm = this.value.trim();
                if (searchTerm) {
                    searchInDocument(searchTerm);
                }
            }
        });
        
        // Search within the current document
        function searchInDocument(searchTerm) {
            // Remove existing highlights
            document.querySelectorAll('.search-highlight').forEach(el => {
                el.outerHTML = el.innerHTML;
            });
            
            const content = document.getElementById('document-content');
            const searchRegex = new RegExp(searchTerm, 'gi');
            
            // Function to highlight matches in a text node
            function highlightMatches(textNode) {
                const parent = textNode.parentNode;
                const text = textNode.nodeValue;
                
                if (!searchRegex.test(text)) return;
                
                const highlightedText = text.replace(searchRegex, match => 
                    `<span class="search-highlight bg-warning">${match}</span>`);
                
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = highlightedText;
                
                const fragment = document.createDocumentFragment();
                while (tempDiv.firstChild) {
                    fragment.appendChild(tempDiv.firstChild);
                }
                
                parent.replaceChild(fragment, textNode);
            }
            
            // Walk through all text nodes
            const walker = document.createTreeWalker(
                content,
                NodeFilter.SHOW_TEXT,
                null,
                false
            );
            
            const textNodes = [];
            let node;
            while (node = walker.nextNode()) {
                textNodes.push(node);
            }
            
            textNodes.forEach(highlightMatches);
            
            // Scroll to first match if found
            const firstMatch = content.querySelector('.search-highlight');
            if (firstMatch) {
                firstMatch.scrollIntoView({ behavior: 'smooth', block: 'center' });
            } else {
                alert('No matches found for: ' + searchTerm);
            }
        }
        
        // Setup navigation buttons
        document.getElementById('prev-section').addEventListener('click', function() {
            // Implement previous section navigation logic
        });
        
        document.getElementById('next-section').addEventListener('click', function() {
            // Implement next section navigation logic
        });
        
        // Toggle notes visibility
        document.getElementById('toggle-notes').addEventListener('click', function() {
            document.querySelectorAll('.note-indicator').forEach(indicator => {
                indicator.classList.toggle('d-none');
            });
        });
        
        // Toggle highlights visibility
        document.getElementById('toggle-highlights').addEventListener('click', function() {
            document.querySelectorAll('.highlighted').forEach(highlight => {
                highlight.classList.toggle('bg-transparent');
            });
        });
        
        // Print document
        document.getElementById('print-document').addEventListener('click', function(e) {
            e.preventDefault();
            window.print();
        });
        
        // Expand all sections
        document.getElementById('expand-all').addEventListener('click', function(e) {
            e.preventDefault();
            document.querySelectorAll('.section-content').forEach(content => {
                content.style.display = 'block';
            });
        });
        
        // Collapse all sections
        document.getElementById('collapse-all').addEventListener('click', function(e) {
            e.preventDefault();
            document.querySelectorAll('.section-content').forEach(content => {
                content.style.display = 'none';
            });        });
    });
</script>
@endpush

    for ($i = 0; $i < $maxParts; $i++) {
        if (!isset($partsA[$i])) {
            return -1;
        }
        if (!isset($partsB[$i])) {
            return 1;
        }

        $partA = $partsA[$i];
        $partB = $partsB[$i];

        if (is_numeric($partA) && is_numeric($partB)) {
            if ($partA !== $partB) {
                return $partA - $partB;
            }
        } else {
            $cmp = strcmp((string) $partA, (string) $partB);
            if ($cmp !== 0) {
                return $cmp;
            }
        }
    }

    return 0;
}

function getLowestIdentifier($row)
{
    if ($row["sub_paragraph"]) {
        return $row["sub_paragraph"];
    }
    if ($row["paragraph"]) {
        return $row["paragraph"];
    }
    if ($row["sub_section"]) {
        return $row["sub_section"];
    }
    if ($row["section"]) {
        return $row["section"];
    }
    if ($row["sub_division"]) {
        return $row["sub_division"];
    }
    return null;
}

function renderPaginationControls($currentPage, $totalPages, $category_id) {
    $html = '<div class="pagination-controls">';

    // Previous button
    $prevDisabled = ($currentPage <= 1) ? 'style="opacity:0.5;pointer-events:none;"' : '';
    $html .= '<button onclick="changePage(' . ($currentPage - 1) . ', ' . $category_id . ')" class="pagination-btn prev-btn" ' . $prevDisabled . '>Previous</button>';

    // Page dropdown
    $html .= '<select onchange="changePage(this.value, ' . $category_id . ')" class="page-select">';
    for ($i = 1; $i <= $totalPages; $i++) {
        $selected = $i == $currentPage ? 'selected' : '';
        $html .= "<option value=\"$i\" $selected>Page $i of $totalPages</option>";
    }
    $html .= '</select>';

    // Next button
    $nextDisabled = ($currentPage >= $totalPages) ? 'style="opacity:0.5;pointer-events:none;"' : '';
    $html .= '<button onclick="changePage(' . ($currentPage + 1) . ', ' . $category_id . ')" class="pagination-btn next-btn" ' . $nextDisabled . '>Next</button>';

    $html .= '</div>';
    return $html;
}

function getPageBoundaries($conn, $table, $category_id) {
    $boundaries = [];

    // Get all IDs where <break> exists
    $sql = "SELECT id FROM `$table` WHERE category_id = :category_id AND paging = '<break>' ORDER BY id";
    $stmt = $conn->prepare($sql);
    $stmt->bindValue(':category_id', $category_id, PDO::PARAM_INT);
    $stmt->execute();

    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $boundaries[] = $row['id'];
    }

    // Ensure at least one page exists
    if (empty($boundaries)) {
        $sql = "SELECT MIN(id) as min_id FROM `$table` WHERE category_id = :category_id";
        $stmt = $conn->prepare($sql);
        $stmt->bindValue(':category_id', $category_id, PDO::PARAM_INT);
        $stmt->execute();
        $row = $stmt->fetch(PDO::FETCH_ASSOC);
        if ($row && isset($row['min_id'])) {
            $boundaries[] = $row['min_id'];
        }
    }

    return $boundaries;
}

function getSortedLegalHierarchy($conn, $table, $category_id, $page = 1, &$totalPages = 1) {
    $boundaries = getPageBoundaries($conn, $table, $category_id);
    $totalPages = count($boundaries) + 1;

    // Prevent invalid page numbers
    if ($page < 1) {
        $page = 1;
    } elseif ($page > $totalPages) {
        $page = $totalPages;
    }

    // Get first record ID dynamically
    $sql = "SELECT MIN(id) as min_id FROM `$table` WHERE category_id = :category_id";
    $stmt = $conn->prepare($sql);
    $stmt->bindValue(':category_id', $category_id, PDO::PARAM_INT);
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_ASSOC);
    $firstId = ($row && isset($row['min_id'])) ? (int)$row['min_id'] : 1;

    // Define page range based on <break>
    if ($page == 1) {
        $startId = $firstId;
        $endId = isset($boundaries[0]) ? $boundaries[0] : PHP_INT_MAX;
    } else {
        $startId = isset($boundaries[$page - 2]) ? (int)$boundaries[$page - 2] + 1 : $firstId;
        $endId = isset($boundaries[$page - 1]) ? (int)$boundaries[$page - 1] : PHP_INT_MAX;
    }

    if (!is_numeric($startId) || !is_numeric($endId)) {
        die("SQL Error: Invalid startId ($startId) or endId ($endId)");
    }

    // Query for records between startId and endId
    $sql = "SELECT * FROM `$table` 
            WHERE category_id = :category_id 
            AND id >= :start_id 
            AND id <= :end_id 
            ORDER BY id";

    $stmt = $conn->prepare($sql);
    $stmt->bindValue(':category_id', $category_id, PDO::PARAM_INT);
    $stmt->bindValue(':start_id', $startId, PDO::PARAM_INT);
    $stmt->bindValue(':end_id', $endId, PDO::PARAM_INT);
    $stmt->execute();

    $rows = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $row["text_content"] = isset($row["text_content"]) 
            ? str_replace("<break>", "", $row["text_content"]) 
            : "";
        $rows[] = $row;
    }

    return $rows;
}

function getStandaloneSections($conn, $table, $category_id) {
    // Get sections that don't belong to any part and match the current category_id
    $sql = "SELECT * FROM `$table` 
            WHERE part IS NULL 
            AND category_id = :category_id 
            AND (section IS NOT NULL OR title IS NOT NULL)
            ORDER BY id";

    $stmt = $conn->prepare($sql);
    $stmt->bindValue(':category_id', $category_id, PDO::PARAM_INT);
    $stmt->execute();

    $standaloneData = [];
    $currentTitle = null;

    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        // Handle title-only entries (these act as headers)
        if (!empty($row["title"]) && empty($row["section"])) {
            $currentTitle = $row["title"];
            $standaloneData[$currentTitle] = [
                "title" => $currentTitle,
                "sections" => [],
            ];
            continue;
        }

        // Handle sections under the current title
        if ($row["section"] !== null) {
            $sectionNumber = $row["section"];

            // If no current title exists, use a default group
            if ($currentTitle === null) {
                $currentTitle = "General Provisions";
                if (!isset($standaloneData[$currentTitle])) {
                    $standaloneData[$currentTitle] = [
                        "title" => $currentTitle,
                        "sections" => [],
                    ];
                }
            }

            // Initialize section if it doesn't exist
            if (!isset($standaloneData[$currentTitle]["sections"][$sectionNumber])) {
                $standaloneData[$currentTitle]["sections"][$sectionNumber] = [
                    "title" => $row["title"],
                    "text_content" => $row["text_content"],
                    "subsections" => [],
                    "paragraphs" => [],
                    "footnote" => $row["footnote"],
                ];
            }

            // Handle subsections
            if ($row["sub_section"] !== null) {
                $subsectionNumber = $row["sub_section"];
                if (!isset($standaloneData[$currentTitle]["sections"][$sectionNumber]["subsections"][$subsectionNumber])) {
                    $standaloneData[$currentTitle]["sections"][$sectionNumber]["subsections"][$subsectionNumber] = [
                        "text_content" => $row["text_content"],
                        "paragraphs" => [],
                        "footnote" => $row["footnote"],
                    ];
                }

                // Handle paragraphs under subsections
                if ($row["paragraph"] !== null) {
                    $paragraphNumber = $row["paragraph"];
                    $standaloneData[$currentTitle]["sections"][$sectionNumber]["subsections"][$subsectionNumber]["paragraphs"][$paragraphNumber] = [
                        "text_content" => $row["text_content"],
                        "sub_paragraphs" => [],
                        "footnote" => $row["footnote"],
                    ];

                    // Handle sub-paragraphs
                    if ($row["sub_paragraph"] !== null) {
                        $standaloneData[$currentTitle]["sections"][$sectionNumber]["subsections"][$subsectionNumber]["paragraphs"][$paragraphNumber]["sub_paragraphs"][] = [
                            "sub_paragraph" => $row["sub_paragraph"],
                            "text_content" => $row["text_content"],
                            "footnote" => $row["footnote"],
                        ];
                    }
                }
            }
            // Handle paragraphs directly under sections
            elseif ($row["paragraph"] !== null) {
                $paragraphNumber = $row["paragraph"];
                $standaloneData[$currentTitle]["sections"][$sectionNumber]["paragraphs"][$paragraphNumber] = [
                    "text_content" => $row["text_content"],
                    "sub_paragraphs" => [],
                    "footnote" => $row["footnote"],
                ];

                // Handle sub-paragraphs
                if ($row["sub_paragraph"] !== null) {
                    $standaloneData[$currentTitle]["sections"][$sectionNumber]["paragraphs"][$paragraphNumber]["sub_paragraphs"][] = [
                        "sub_paragraph" => $row["sub_paragraph"],
                        "text_content" => $row["text_content"],
                        "footnote" => $row["footnote"],
                    ];
                }
            }
        }
    }

    return $standaloneData;
}

function renderStandaloneSections($standaloneData, $category_id, $table) {
    $html = "";

    foreach ($standaloneData as $titleGroup => $group) {
        // Render title group header
        $html .= "<div class='standalone-group'>";
        $html .= "<h3>" . makeLinksClickable($titleGroup, $category_id) . "</h3>";

        // Render sections
        if (!empty($group["sections"])) {
            foreach ($group["sections"] as $sectionNumber => $section) {
                $html .= "<div class='section-container'>";

                // Section title and content
                if (!empty($section["title"])) {
                    $html .= "<h5>" . makeLinksClickable($section["title"], $category_id) . "</h5>";
                }
                if (!empty($section["text_content"])) {
                    $html .= "<p><b>{$sectionNumber}</b> " . 
                    makeLinksClickable($section["text_content"], $category_id, $sectionNumber) . "</p>";
                }

                // Render subsections
                if (!empty($section["subsections"])) {
                    foreach ($section["subsections"] as $subsectionNumber => $subsection) {
                        if (!empty($subsection["text_content"])) {
                            $html .= "<p><b>{$sectionNumber}({$subsectionNumber})</b> " . 
                                makeLinksClickable($subsection["text_content"], $category_id, $sectionNumber . '(' . $subsectionNumber . ')') . "</p>";
                        }

                        // Render paragraphs under subsection
                        if (!empty($subsection["paragraphs"])) {
                            foreach ($subsection["paragraphs"] as $paragraphNumber => $paragraph) {
                                $html .= "<ul><li><b>{$paragraphNumber}</b> " . 
                                    makeLinksClickable($paragraph["text_content"], $category_id, 
                                        $sectionNumber . '(' . $subsectionNumber . ')(' . $paragraphNumber . ')'
                                    );
                                
                                // Render sub-paragraphs
                                if (!empty($paragraph["sub_paragraphs"])) {
                                    foreach ($paragraph["sub_paragraphs"] as $subParagraph) {
                                        $html .= "<ul><li><b>{$subParagraph["sub_paragraph"]}</b> " . 
                                            makeLinksClickable($subParagraph["text_content"], $category_id, 
                                                $sectionNumber . '(' . $subsectionNumber . ')(' . $paragraphNumber . ')(' . $subParagraph["sub_paragraph"] . ')'
                                            ) . "</li></ul>";
                                    }
                                }
                                
                                $html .= "</li></ul>";
                            }
                        }
                    }
                }

                // Render paragraphs directly under section
                if (!empty($section["paragraphs"])) {
                    foreach ($section["paragraphs"] as $paragraphNumber => $paragraph) {
                        $html .= "<ul><li><b>{$paragraphNumber}</b> " . 
                            makeLinksClickable($paragraph["text_content"], $category_id, $sectionNumber . '(' . $paragraphNumber . ')');

                        // Render sub-paragraphs
                        if (!empty($paragraph["sub_paragraphs"])) {
                            foreach ($paragraph["sub_paragraphs"] as $subParagraph) {
                                $html .= "<ul><li><b>{$subParagraph["sub_paragraph"]}</b> " . 
                                    makeLinksClickable($subParagraph["text_content"], $category_id, 
                                        $sectionNumber . '(' . $paragraphNumber . ')(' . $subParagraph["sub_paragraph"] . ')'
                                    ) . "</li></ul>";
                            }
                        }
                        $html .= "</li></ul>";
                    }
                }

                // Display section footnote if exists
                if (!empty($section["footnote"])) {
                    $html .= "<p class='footnote' data-category-id='{$category_id}'><em>" . 
                        html_entity_decode($section["footnote"]) . "</em></p>";
                }

                $html .= "</div>";
            }
        }

        $html .= "</div>";
    }

    return $html;
}

function makeLinksClickable($text, $category_id, $current_section = null) {
    if (empty($text)) {
        return "";
    }

    // Extract base section from current_section
    $base_section = '';
    $base_subsection = '';
    if ($current_section && preg_match('/^(\d+(?:\.\d+)?)(?:\((\d+)\))?/', $current_section, $base_match)) {
        $base_section = $base_match[1];
        $base_subsection = $base_match[2] ?? '';
    }

    // PRIORITY 1: Process cross-act references first
    // Handle specific act references, making only the section part clickable
    $text = preg_replace_callback(
        '/\b(subsection|section|paragraph)\s+(\d+(?:\.\d+)?(?:\([^)]+\))*)\s*\(([^)]+(?:Act|Division Rules|Rules)[^)]*)\)/i',
        function ($matches) use ($category_id) {
            global $conn;
            $type = strtolower($matches[1]);
            $section_id = $matches[2];
            $act_name = trim($matches[3]);
            
            // Look up the correct category ID for this act using PDO
            $actStmt = $conn->prepare("SELECT id FROM legal_tables_master WHERE 
                act_name_1 = :name1 OR act_name_2 = :name2 OR act_name_3 = :name3 OR
                act_name_1 LIKE :like1 OR act_name_2 LIKE :like2 OR act_name_3 LIKE :like3
                LIMIT 1");
            $like = "%$act_name%";
            $actStmt->bindParam(':name1', $act_name, PDO::PARAM_STR);
            $actStmt->bindParam(':name2', $act_name, PDO::PARAM_STR);
            $actStmt->bindParam(':name3', $act_name, PDO::PARAM_STR);
            $actStmt->bindParam(':like1', $like, PDO::PARAM_STR);
            $actStmt->bindParam(':like2', $like, PDO::PARAM_STR);
            $actStmt->bindParam(':like3', $like, PDO::PARAM_STR);
            $actStmt->execute();
            $row = $actStmt->fetch(PDO::FETCH_ASSOC);
            $actCategoryId = $row ? $row['id'] : $category_id;
            
            return '<span class="ref cross-act-ref" data-section-id="' . htmlspecialchars($section_id, ENT_QUOTES) . 
                   '" data-category-id="' . htmlspecialchars($actCategoryId, ENT_QUOTES) . '" data-act-name="' . htmlspecialchars($act_name, ENT_QUOTES) . 
                   '">' . $type . ' ' . $section_id . '</span>' . ' (' . htmlspecialchars($act_name, ENT_QUOTES) . ')';
        },
        $text
    );

    // Pattern: Handle "paragraphs (d) and (d.1)" format
    $text = preg_replace_callback(
        '/\b(paragraph|paragraphs)\s+\(([a-z](?:\.\d+)?)\)(?:\s+and\s+\(([a-z](?:\.\d+)?)\))?/i',
        function ($matches) use ($base_section, $base_subsection, $category_id) {
            $type = strtolower($matches[1]);
            $first_letter = $matches[2];
            $second_letter = isset($matches[3]) ? $matches[3] : '';
            
            if (empty($base_section)) return $matches[0];
            
            // Build the section ID including subsection if available
            $section_id = $base_section;
            if (!empty($base_subsection)) {
                $section_id .= '(' . $base_subsection . ')';
            }
            
            $html = '<span class="ref" data-section-id="' . htmlspecialchars($section_id . '(' . $first_letter . ')', ENT_QUOTES) . 
                    '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                    '">' . $type . ' (' . $first_letter . ')</span>';
            
            if ($second_letter) {
                $html .= ' and <span class="ref" data-section-id="' . htmlspecialchars($section_id . '(' . $second_letter . ')', ENT_QUOTES) . 
                         '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                         '">(' . $second_letter . ')</span>';
            }
            
            return $html;
        },
        $text
    );

    // Pattern: Handle both "subsection (1) or (2)" and "subsection (1.1) or (1.2)" patterns
    $text = preg_replace_callback(
        '/\b(subsection|subsections?)\s+\((\d+(?:\.\d+)?)\)(?:\s+or\s+\((\d+(?:\.\d+)?)\))/i',
        function ($matches) use ($base_section, $category_id) {
            $type = strtolower($matches[1]);
            $first_num = $matches[2];
            $second_num = $matches[3];
            
            if (empty($base_section)) return $matches[0];
            
            $html = '<span class="ref" data-section-id="' . htmlspecialchars($base_section . '(' . $first_num . ')', ENT_QUOTES) . 
                    '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                    '">' . $type . ' (' . $first_num . ')</span>';
            
            if ($second_num) {
                $html .= ' or <span class="ref" data-section-id="' . htmlspecialchars($base_section . '(' . $second_num . ')', ENT_QUOTES) . 
                         '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                         '">(' . $second_num . ')</span>';
            }
            
            return $html;
        },
        $text
    );

    // NEW Pattern: Handle simple "paragraph (a)" format with proper context
    $text = preg_replace_callback(
        '/\b(paragraph|paragraphs)\s+\(([a-z](?:\.\d+)?)\)(?!\s*\([a-z](?:\.\d+)?\))/i',
        function ($matches) use ($base_section, $base_subsection, $category_id) {
            $type = strtolower($matches[1]);
            $letter = $matches[2];
            
            if (empty($base_section)) return $matches[0];
            
            // Build the complete section ID using context
            $section_id = $base_section;
            
            // Add subsection if available
            if (!empty($base_subsection)) {
                $section_id .= '(' . $base_subsection . ')';
            }
            
            // Add the paragraph letter
            $section_id .= '(' . $letter . ')';
            
            return '<span class="ref" data-section-id="' . htmlspecialchars($section_id, ENT_QUOTES) . 
                '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                '">' . $type . ' (' . $letter . ')</span>';
        },
        $text
    );

    // Pattern: Handle "section 34, 35, 35.1 or 37" format
    $text = preg_replace_callback(
        '/\b(section|sections)\s+(\d+(?:\.\d+)?)(?:\s*,\s*(\d+(?:\.\d+)?))*(?:\s+or\s+(\d+(?:\.\d+)?))?/i',
        function ($matches) use ($category_id) {
            $type = strtolower($matches[1]);
            $first_num = $matches[2];
            $output = '';
            
            // Start with first number
            $output = '<span class="ref" data-section-id="' . htmlspecialchars($first_num, ENT_QUOTES) . 
                    '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                    '">' . $type . ' ' . $first_num . '</span>';
            
            // Get all comma-separated numbers
            if (preg_match_all('/,\s*(\d+(?:\.\d+)?)/', $matches[0], $comma_matches)) {
                foreach ($comma_matches[1] as $number) {
                    $output .= ', <span class="ref" data-section-id="' . htmlspecialchars($number, ENT_QUOTES) . 
                            '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                            '">' . $number . '</span>';
                }
            }
            
            // Add the "or" number if it exists
            if (!empty($matches[4])) {
                $output .= ' or <span class="ref" data-section-id="' . htmlspecialchars($matches[4], ENT_QUOTES) . 
                        '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                        '">' . $matches[4] . '</span>';
            }
            
            return $output;
        },
        $text
    );

    // Pattern: Handle "andsubsections X(Y), (Y.1) and (Y.2)" format
    $text = preg_replace_callback(
        '/\b(andsubsections?)\s+(\d+(?:\.\d+)?)\((\d+(?:\.\d+)?)\)(?:\s*,\s*\((\d+(?:\.\d+)?)\))*(?:\s*and\s*\((\d+(?:\.\d+)?)\))?/i',
        function ($matches) use ($category_id) {
            $type = strtolower($matches[1]);
            $section = $matches[2];
            $first_num = $matches[3];
            
            $html = '<span class="ref" data-section-id="' . htmlspecialchars($section . '(' . $first_num . ')', ENT_QUOTES) . 
                    '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                    '">' . $type . ' ' . $section . '(' . $first_num . ')</span>';
            
            // Handle comma-separated subsections
            if (preg_match_all('/\((\d+(?:\.\d+)?)\)/', $matches[0], $num_matches)) {
                foreach (array_slice($num_matches[1], 1, -1) as $num) {
                    $html .= ', <span class="ref" data-section-id="' . htmlspecialchars($section . '(' . $num . ')', ENT_QUOTES) . 
                            '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                            '">(' . $num . ')</span>';
                }
            }
            
            // Handle the final "and" subsection
            if (isset($matches[5])) {
                $final_num = $matches[5];
                $html .= ' and <span class="ref" data-section-id="' . htmlspecialchars($section . '(' . $final_num . ')', ENT_QUOTES) . 
                        '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . 
                        '">(' . $final_num . ')</span>';
            }
            
            return $html;
        },
        $text
    );

    // 1. Relative references
    $text = preg_replace_callback(
        '/\b(subsection|paragraph|subparagraph)\s+((\([^)]+\))+)/i',
        function ($matches) use ($base_section, $base_subsection, $category_id) {
            $type = strtolower($matches[1]);
            $ref_chain = $matches[2];

            if (empty($base_section)) return $matches[0];

            if ($type === 'subsection') {
                $section_id = $base_section . $ref_chain;
            } elseif ($type === 'paragraph' || $type === 'subparagraph') {
                $section_id = $base_section;
                if (!empty($base_subsection)) {
                    $section_id .= '(' . $base_subsection . ')';
                }
                $section_id .= $ref_chain;
            } else {
                $section_id = $base_section;
            }

            return '<span class="ref" data-section-id="' . htmlspecialchars($section_id, ENT_QUOTES) .
                '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . '">' .
                htmlspecialchars($matches[0], ENT_QUOTES) . '</span>';
        },
        $text
    );

    // 2. Prefixed references
    $pattern = '/\b(section|subsection|paragraph|subparagraph|sections|subsections|paragraphs|subparagraphs)\s+' .
        '((?:\d+(?:\.\d+)?(?:\([^)]+\))*)' .
        '(?:\s*(?:,|and|or|to)\s*(?:\d+(?:\.\d+)?(?:\([^)]+\))*)?)*)/i';

    $text = preg_replace_callback($pattern, function ($matches) use ($category_id) {
        $prefix = $matches[1];
        $references = $matches[2];

        $tokens = preg_split('/(\s*,\s*|\s+and\s+|\s+or\s+|\s+to\s+)/i', $references, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);
        $last_full_ref = '';
        $output = '';
        $isFirst = true;

        foreach ($tokens as $token) {
            $token = trim($token);
            if (preg_match('/^(,|and|or|to)$/i', $token)) {
                $output .= ' ' . $token;
                continue;
            }

            if (preg_match('/^\d+(?:\.\d+)?(?:\([^)]+\))*/', $token)) {
                $last_full_ref = $token;
            } elseif (preg_match('/^\([^)]+\)$/', $token) && $last_full_ref) {
                $base = preg_replace('/\([^)]+\)$/', '', $last_full_ref);
                $token = $base . $token;
            } elseif ($last_full_ref) {
                $token = $last_full_ref;
            } else {
                $output .= ' ' . htmlspecialchars($token, ENT_QUOTES);
                continue;
            }

            $section_id = $token;
            $display_text = ($isFirst ? $prefix . ' ' : '') . $token;
            $isFirst = false;

            $output .= ' <span class="ref" data-section-id="' . htmlspecialchars($section_id, ENT_QUOTES) .
                '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . '">' .
                htmlspecialchars($display_text, ENT_QUOTES) . '</span>';
        }

        return trim($output);
    }, $text);

    // Remove processing markers
    $processed_parts = [];
    $text = preg_replace_callback('/###PROCESSED:(.*?)###(.*?)###\/PROCESSED###/s', function($matches) use (&$processed_parts) {
        $parts = explode(',', $matches[1]);
        $processed_parts = array_merge($processed_parts, $parts);
        return $matches[2];
    }, $text);
    
    // 3. Standalone references
    $standalone_pattern = '/\b(\d+(?:\.\d+)?(?:\([^)]+\)){1,4})\b(?!\s*\([a-z](?:\.\d+)?\))(?![^<>]*<\/span>)/';
    $text = preg_replace_callback($standalone_pattern, function ($matches) use ($category_id, $processed_parts) {
        $section_id = $matches[1];
        
        if (in_array($section_id, $processed_parts)) {
            return $matches[0];
        }
        
        return '<span class="ref" data-section-id="' . htmlspecialchars($section_id, ENT_QUOTES) .
            '" data-category-id="' . htmlspecialchars($category_id, ENT_QUOTES) . '">' .
            htmlspecialchars($matches[0], ENT_QUOTES) . '</span>';
    }, $text);

    return $text;
}

function displaySection($section, $sectionData, $category_id) {
    echo '<div class="section">';
    echo '<h3>Section ' . htmlspecialchars($section);
    if (!empty($sectionData['title'])) {
        echo ' — ' . htmlspecialchars($sectionData['title']);
    }
    echo '</h3>';

    // Display main section content
    if (!empty($sectionData['content'])) {
        echo '<div class="section-content">';
        echo makeLinksClickable($sectionData['content'], $category_id, $section);
        echo '</div>';
    }

    // Display subsections
    if (!empty($sectionData['subsections'])) {
        ksort($sectionData['subsections'], SORT_NATURAL);
        foreach ($sectionData['subsections'] as $subsectionNum => $subsection) {
            $sectionId = $section . "(" . $subsectionNum . ")";
            
            echo '<div class="subsection" id="subsection-' . htmlspecialchars($section) . '-' . htmlspecialchars($subsectionNum) . '">';
            if (!empty($subsection['content'])) {
                echo makeLinksClickable($subsection['content'], $category_id, $sectionId);
            }

            // Display paragraphs
            if (!empty($subsection['paragraphs'])) {
                ksort($subsection['paragraphs'], SORT_NATURAL);
                foreach ($subsection['paragraphs'] as $paragraphNum => $paragraph) {
                    $paragraphId = $sectionId . "(" . $paragraphNum . ")";
                    echo '<div class="paragraph" id="paragraph-' . 
                            htmlspecialchars($section) . '-' . 
                            htmlspecialchars($subsectionNum) . '-' . 
                            htmlspecialchars($paragraphNum) . '">';
                    echo makeLinksClickable($paragraph['content'], $category_id, $paragraphId);
                    echo '</div>';
                }
            }
            echo '</div>';
        }
    }

    //////////////////////////////////////////////////////////Fetch Reference//////////////////////////////////////////////////////////////

    // Enable error logging
    error_reporting(E_ALL);
    ini_set('display_errors', 0);
    ini_set('log_errors', 1);
    ini_set('error_log', __DIR__ . '/debug.log');

    header('Content-Type: application/json'); 

    $servername = "localhost";
    $username = "root";
    $password = "";
    $dbname = "testings"; // Change this to your database name

    $conn = new mysqli($servername, $username, $password, $dbname);

    if ($conn->connect_error) {
        echo json_encode(['error' => true, 'message' => 'Connection failed: ' . $conn->connect_error]);
        exit;
    }

    function fetchReference($conn, $sectionId, $categoryId, $searchType = 'current') {
        // First, get the table name and act names from legal_tables_master
        $stmt = $conn->prepare("SELECT table_name, act_name_1, act_name_2, act_name_3 FROM legal_tables_master WHERE id = ?");
        $stmt->bind_param("i", $categoryId);
        $stmt->execute();
        $result = $stmt->get_result();
        $tableInfo = $result->fetch_assoc();
        
        if (!$tableInfo) {
            return ['error' => 'Category not found'];
        }
        
        $currentTable = $tableInfo['table_name'];
        
        // Store act names for reference
        $actNames = array_filter([
            $tableInfo['act_name_1'],
            $tableInfo['act_name_2'],
            $tableInfo['act_name_3']
        ]);
        
        $sections = [];
        
        // Check if this is a cross-act reference (contains Act or Rules name in parentheses)
        if (preg_match('/^([^(]+)\(([^)]+(?:Act|Rules)[^)]*)\)$/i', $sectionId, $matches)) {
            $sectionIdPart = trim($matches[1]); // e.g., '2(1)'
            $actName = trim($matches[2]); // e.g., 'Immigration and Refugee Protection Act' or 'Immigration Division Rules'
            
            // Search for act/rules name in legal_tables_master using LIKE for partial matches
            $actStmt = $conn->prepare("SELECT id, table_name, act_name_1, act_name_2, act_name_3 FROM legal_tables_master WHERE 
                (act_name_1 LIKE ? OR act_name_2 LIKE ? OR act_name_3 LIKE ?) 
                AND id != ? 
                ORDER BY 
                    CASE 
                        WHEN act_name_1 = ? THEN 1
                        WHEN act_name_2 = ? THEN 2
                        WHEN act_name_3 = ? THEN 3
                        WHEN act_name_1 LIKE ? THEN 4
                        WHEN act_name_2 LIKE ? THEN 5
                        WHEN act_name_3 LIKE ? THEN 6
                        ELSE 7
                    END
                LIMIT 1");
            
            $like = "%$actName%";
            $actStmt->bind_param("sssisssssss", $like, $like, $like, $categoryId, $actName, $actName, $actName, $like, $like, $like);
            $actStmt->execute();
            $actResult = $actStmt->get_result();
            $actRow = $actResult->fetch_assoc();
            
            if ($actRow) {
                // Now search the referenced act's table for the sectionIdPart
                $refTable = $actRow['table_name'];
                
                // Get the actual category_id for the referenced act/rules
                $actCategoryId = $actRow['id'];
                
                $refStmt = $conn->prepare("SELECT *, 1 as from_other_category, ? as source_table FROM $refTable 
                    WHERE category_id = ? AND (
                        section_id = ? 
                        OR section_id LIKE CONCAT(?, '.%')
                        OR section_id LIKE CONCAT(?, '%')
                    )
                    ORDER BY 
                        CASE 
                            WHEN section_id = ? THEN 1
                            WHEN section_id LIKE CONCAT(?, '.%') THEN 2
                            ELSE 3
                        END
                    LIMIT 10");
                
                $refStmt->bind_param("siissss", $refTable, $actCategoryId, $sectionIdPart, $sectionIdPart, $sectionIdPart, $sectionIdPart, $sectionIdPart);
                $refStmt->execute();
                $refResult = $refStmt->get_result();
                
                while ($refRow = $refResult->fetch_assoc()) {
                    $refRow['lowest_identifier'] = getLowestIdentifier($refRow);
                    $refRow['title'] = $refRow['title'] . ' [' . $actName . ']';
                    $refRow['category_id'] = $actCategoryId; // Add the correct category ID
                    $requiredFields = ['title', 'text_content', 'section_id', 'category_id'];
                    foreach ($requiredFields as $field) {
                        if (!isset($refRow[$field])) {
                            $refRow[$field] = '';
                        }
                    }
                    $sections[] = $refRow;
                }
                
                if (!empty($sections)) {
                    return $sections;
                } else {
                    // If no section found in referenced act/rules, return info for popup
                    return [[
                        'act_reference_found' => true,
                        'act_id' => $actRow['id'],
                        'table_name' => $actRow['table_name'],
                        'act_name' => $actName,
                        'section_searched' => $sectionIdPart,
                        'act_names' => array_filter([
                            $actRow['act_name_1'],
                            $actRow['act_name_2'],
                            $actRow['act_name_3']
                        ]),
                        'title' => 'Reference to ' . $actName,
                        'text_content' => 'Section ' . $sectionIdPart . ' not found in ' . $actName . '. Click to browse this document.',
                        'section_id' => $sectionIdPart,
                        'category_id' => $actRow['id']
                    ]];
                }
            } else {
                // Act/Rules not found
                return [[
                    'error' => true,
                    'title' => 'Reference Not Found',
                    'text_content' => 'Could not find "' . $actName . '" in the legal database.',
                    'section_id' => $sectionId,
                    'category_id' => $categoryId
                ]];
            }
        }
        
        // Regular search in current table
        $sql = "SELECT *, 0 as from_other_category, ? as source_table 
                FROM $currentTable 
                WHERE category_id = ? 
                AND (
                    section_id = ? 
                    OR section_id LIKE CONCAT(?, '.%')
                    OR section_id LIKE CONCAT(?, '%')
                )
                ORDER BY 
                    CASE 
                        WHEN section_id = ? THEN 1
                        WHEN section_id LIKE CONCAT(?, '.%') THEN 2
                        ELSE 3
                    END
                LIMIT 10";
        
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("siissss", $currentTable, $categoryId, $sectionId, $sectionId, $sectionId, $sectionId, $sectionId);
        $stmt->execute();
        $result = $stmt->get_result();
        
        while ($row = $result->fetch_assoc()) {
            $row['lowest_identifier'] = getLowestIdentifier($row);
            // Ensure all necessary fields are present
            $requiredFields = ['title', 'text_content', 'section_id', 'category_id'];
            foreach ($requiredFields as $field) {
                if (!isset($row[$field])) {
                    $row[$field] = '';
                }
            }
            $sections[] = $row;
        }
        
        // Remove duplicates based on section_id and category_id combination
        $unique_sections = [];
        $seen_combinations = [];
        
        foreach ($sections as $section) {
            $key = $section['section_id'] . '_' . $section['category_id'];
            if (!in_array($key, $seen_combinations)) {
                $seen_combinations[] = $key;
                $unique_sections[] = $section;
            }
        }
        
        return $unique_sections;
    }

    if (isset($_POST['section_id']) && isset($_POST['category_id'])) {
        $sectionId = $_POST['section_id'];
        $categoryId = $_POST['category_id'];
        $searchType = $_POST['search_type'] ?? 'current';
        $part = $_POST['part'] ?? null;
        $division = $_POST['division'] ?? null;
        
        $sections = fetchReference($conn, $sectionId, $categoryId, $searchType);
        
        // Add part and division information to each section if provided
        if ($part !== null || $division !== null) {
            foreach ($sections as &$section) {
                if ($part !== null) {
                    $section['part'] = $part;
                }
                if ($division !== null) {
                    $section['division'] = $division;
                }
            }
        }
        
        echo json_encode(['error' => false, 'data' => $sections]);
    } else {
        echo json_encode(['error' => 'Section ID or Category ID not provided']);
    }

    function getLowestIdentifier($row) {
        if (!empty($row['sub_paragraph'])) return $row['sub_paragraph'];
        if (!empty($row['paragraph'])) return $row['paragraph'];
        if (!empty($row['sub_section'])) return $row['sub_section'];
        if (!empty($row['section'])) return $row['section'];
        if (!empty($row['sub_division'])) return $row['sub_division'];
        return null;
    }

    $conn->close();

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    ///////////////////////////////////////////////////////////////save_pinned_popups//////////////////////////////////////////////////////
    
    <?php
session_start();
require_once '../../config/config.php';

// Prevent unexpected output
ob_start();

// Set JSON content type
header('Content-Type: application/json; charset=UTF-8');

// Ensure user is logged in and a client is selected
if (!isset($_SESSION['user_id']) || !isset($_SESSION['selected_client_id'])) {
    ob_end_clean();
    echo json_encode(['success' => false, 'message' => 'User or client not selected']);
    exit;
}

// Get JSON data from the request body
$jsonInput = file_get_contents('php://input');

// Debugging: Log raw input
file_put_contents('debug_log.txt', "Raw JSON Input: " . $jsonInput . "\n", FILE_APPEND);

// Check for empty input before decoding
if (empty($jsonInput)) {
    ob_end_clean();
    echo json_encode(['success' => false, 'message' => 'Empty JSON input']);
    exit;
}

// Decode the JSON string
$data = json_decode($jsonInput, true);

// Log the decoded data
file_put_contents('debug_log.txt', "Decoded Data: " . print_r($data, true) . "\n", FILE_APPEND);

// Validate JSON decoding
if (json_last_error() !== JSON_ERROR_NONE) {
    ob_end_clean();
    echo json_encode(['success' => false, 'message' => 'Invalid JSON format']);
    exit;
}

// Log each popup entry (only if 'popups' exists and is an array)
if (!empty($data['popups']) && is_array($data['popups'])) {
    foreach ($data['popups'] as $popup) {
        file_put_contents('debug_log.txt', "Received Popup Entry: " . print_r($popup, true) . "\n", FILE_APPEND);
    }
}

// Database connection is required
global $conn;

function savePinnedPopups($conn, $data) {
    $user_id = $_SESSION['user_id'];
    $client_id = $_SESSION['selected_client_id'];

    $popups = $data['popups'] ?? [];
    if (!is_array($popups)) {
        echo json_encode(['success' => false, 'message' => 'Invalid popups data format']);
        return;
    }

    try {
        $conn->beginTransaction();

        // Delete existing popups
        $delete_stmt = $conn->prepare("DELETE FROM user_pinned_popups WHERE user_id = :user_id AND client_id = :client_id");
        $delete_stmt->execute([
            ':user_id' => $user_id,
            ':client_id' => $client_id
        ]);

        // Insert new popups
        $insert_stmt = $conn->prepare("
            INSERT INTO user_pinned_popups 
            (user_id, client_id, section_id, category_id, part, division, pinned_at) 
            VALUES (:user_id, :client_id, :section_id, :category_id, :part, :division, NOW())
        ");

        foreach ($popups as $popup) {
            if (!isset($popup['section_id'], $popup['category_id'])) {
                continue;
            }

            $insert_stmt->execute([
                ':user_id' => $user_id,
                ':client_id' => $client_id,
                ':section_id' => $popup['section_id'],
                ':category_id' => $popup['category_id'],
                ':part' => $popup['part'] ?? null,
                ':division' => $popup['division'] ?? null
            ]);
        }

        $conn->commit();
        ob_end_clean();
        echo json_encode([
            'success' => true,
            'message' => 'Popups saved successfully',
            'saved_count' => count($popups)
        ]);
    } catch (PDOException $e) {
        $conn->rollBack();
        ob_end_clean();
        echo json_encode(['success' => false, 'message' => 'Error saving popups: ' . $e->getMessage()]);
    }
}

function fetchPinnedPopups($conn) {
    $user_id = $_SESSION['user_id'];
    $client_id = $_SESSION['selected_client_id'];

    $stmt = $conn->prepare("
        SELECT section_id, category_id, part, division 
        FROM user_pinned_popups 
        WHERE user_id = :user_id AND client_id = :client_id 
        ORDER BY pinned_at
    ");
    $stmt->execute([
        ':user_id' => $user_id,
        ':client_id' => $client_id
    ]);
    $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);

    $popups = array_map(function($row) {
        return [
            'section_id' => $row['section_id'],
            'category_id' => $row['category_id'],
            'part' => $row['part'] ?: null,
            'division' => $row['division'] ?: null
        ];
    }, $rows);

    ob_end_clean();
    echo json_encode(['success' => true, 'popups' => $popups]);
}

function clearPinnedPopups($conn) {
    $user_id = $_SESSION['user_id'];
    $client_id = $_SESSION['selected_client_id'];

    $stmt = $conn->prepare("DELETE FROM user_pinned_popups WHERE user_id = :user_id AND client_id = :client_id");
    $stmt->execute([
        ':user_id' => $user_id,
        ':client_id' => $client_id
    ]);

    ob_end_clean();
    echo json_encode(['success' => true, 'message' => 'Popups cleared']);
}

// Route the request
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (!isset($data['action'])) {
        ob_end_clean();
        echo json_encode(['success' => false, 'message' => 'No action specified']);
        exit;
    }

    switch ($data['action']) {
        case 'save':
            savePinnedPopups($conn, $data);
            break;
        case 'fetch':
            fetchPinnedPopups($conn);
            break;
        case 'clear':
            clearPinnedPopups($conn);
            break;
        default:
            ob_end_clean();
            echo json_encode(['success' => false, 'message' => 'Invalid action']);
    }
}
?>

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////save_popup_reports//////////////////////////////////////////////////////
    
header('Content-Type: application/json');
error_reporting(E_ALL);
ini_set('display_errors', 0);
ini_set('log_errors', 1);
ini_set('error_log', __DIR__ . '/debug.log');

require_once __DIR__ . '/../../config/config.php';

// Get user ID from session
session_start();
$user_id = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : null;

if (!$user_id) {
    echo json_encode(['error' => true, 'message' => 'User not authenticated']);
    exit;
}

// Get POST data
$data = json_decode(file_get_contents('php://input'), true);

if (!isset($data['popup_title']) || !isset($data['section_id']) || !isset($data['category_id'])) {
    echo json_encode(['error' => true, 'message' => 'Missing required fields']);
    exit;
}

$popup_title = $data['popup_title'];
$section_id = $data['section_id'];
$category_id = $data['category_id'];

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $pdo->prepare("INSERT INTO popup_reports (user_id, popup_title, section_id, category_id) VALUES (?, ?, ?, ?)");
    $result = $stmt->execute([$user_id, $popup_title, $section_id, $category_id]);

    if ($result) {
        echo json_encode(['success' => true, 'message' => 'Report submitted successfully']);
    } else {
        echo json_encode(['error' => true, 'message' => 'Failed to save report']);
    }
} catch (PDOException $e) {
    error_log("Database Error: " . $e->getMessage());
    echo json_encode(['error' => true, 'message' => 'Database error occurred']);
}

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
   /////////////////////////////////////////////////////////save_text.php//////////////////////////////////////////////////////
   

session_start();
require_once '../../config/config.php'; // Uses PDO

header('Content-Type: application/json');
ob_start(); // Start output buffering

// Ensure user is authenticated and client is selected
if (!isset($_SESSION['user_id']) || !isset($_SESSION['selected_client_id'])) {
    ob_clean();
    echo json_encode(["success" => false, "message" => "Unauthorized access"]);
    exit;
}

$user_id = $_SESSION['user_id'];
$client_id = $_SESSION['selected_client_id'];
$category_id = isset($_POST['category_id']) ? (int)$_POST['category_id'] : 0;
$edited_content = isset($_POST['edited_content']) ? trim($_POST['edited_content']) : '';

if ($category_id === 0) {
    ob_clean();
    echo json_encode(["success" => false, "message" => "Invalid category ID"]);
    exit;
}

if (empty($edited_content)) {
    ob_clean();
    echo json_encode(["success" => false, "message" => "Content cannot be empty"]);
    exit;
}

try {
    error_log("Saving content for user_id: $user_id, client_id: $client_id, category_id: $category_id");

    // Check if content already exists
    $stmt = $conn->prepare("SELECT text_id FROM juris_user_texts WHERE user_id = :user_id AND client_id = :client_id AND category_id = :category_id");
    $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);
    $stmt->bindParam(':client_id', $client_id, PDO::PARAM_INT);
    $stmt->bindParam(':category_id', $category_id, PDO::PARAM_INT);
    $stmt->execute();

    if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        // Update existing content
        $update_stmt = $conn->prepare("UPDATE juris_user_texts SET edited_content = :content, last_updated = NOW() WHERE text_id = :text_id");
        $update_stmt->bindParam(':content', $edited_content, PDO::PARAM_STR);
        $update_stmt->bindParam(':text_id', $row['text_id'], PDO::PARAM_INT);
        $update_stmt->execute();
    } else {
        // Insert new content
        $insert_stmt = $conn->prepare("INSERT INTO juris_user_texts (user_id, client_id, category_id, edited_content, last_updated) VALUES (:user_id, :client_id, :category_id, :content, NOW())");
        $insert_stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);
        $insert_stmt->bindParam(':client_id', $client_id, PDO::PARAM_INT);
        $insert_stmt->bindParam(':category_id', $category_id, PDO::PARAM_INT);
        $insert_stmt->bindParam(':content', $edited_content, PDO::PARAM_STR);
        $insert_stmt->execute();
    }

    ob_clean();
    echo json_encode(["success" => true, "message" => "Content saved successfully"]);

} catch (Exception $e) {
    error_log("Error saving content: " . $e->getMessage());
    ob_clean();
    echo json_encode(["success" => false, "message" => "An error occurred while saving content"]);
}
exit;

   
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
   ////////////////////////////////////////////////get_text.php//////////////////////////////////////////////////////////////////////

session_start();
require_once '../../config/config.php'; // PDO connection assumed

header('Content-Type: application/json');
ob_start(); // Start output buffering

// Ensure user is authenticated and client is selected
if (!isset($_SESSION['user_id']) || !isset($_SESSION['selected_client_id'])) {
    ob_clean();
    echo json_encode(["success" => false, "message" => "Unauthorized access"]);
    exit;
}

$user_id = $_SESSION['user_id'];
$client_id = $_SESSION['selected_client_id'];
$category_id = isset($_GET['category_id']) ? (int)$_GET['category_id'] : 0;

if ($category_id === 0) {
    ob_clean();
    echo json_encode(["success" => false, "message" => "Invalid category ID"]);
    exit;
}

try {
    error_log("Fetching content for user_id: $user_id, client_id: $client_id, category_id: $category_id");

    // Prepare and execute the query using PDO
    $stmt = $conn->prepare("
        SELECT edited_content 
        FROM juris_user_texts 
        WHERE user_id = :user_id AND client_id = :client_id AND category_id = :category_id 
        ORDER BY last_updated DESC 
        LIMIT 1
    ");
    $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);
    $stmt->bindParam(':client_id', $client_id, PDO::PARAM_INT);
    $stmt->bindParam(':category_id', $category_id, PDO::PARAM_INT);
    $stmt->execute();

    $row = $stmt->fetch(PDO::FETCH_ASSOC);

    ob_clean();
    if ($row) {
        echo json_encode(["success" => true, "content" => trim($row['edited_content'])]);
    } else {
        echo json_encode(["success" => false, "message" => "No content found"]);
    }
} catch (Exception $e) {
    error_log("Error fetching content: " . $e->getMessage());
    ob_clean();
    echo json_encode(["success" => false, "message" => "An error occurred while fetching content"]);
}
exit; 

   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
session_start();
require_once '../../config/config.php'; // PDO connection assumed

header('Content-Type: application/json');
ob_start(); // Start output buffering

// Ensure user is authenticated and client is selected
if (!isset($_SESSION['user_id']) || !isset($_SESSION['selected_client_id'])) {
    ob_clean();
    echo json_encode(["success" => false, "message" => "Unauthorized access"]);
    exit;
}

$user_id = $_SESSION['user_id'];
$client_id = $_SESSION['selected_client_id'];
$category_id = isset($_GET['category_id']) ? (int)$_GET['category_id'] : 0;

if ($category_id === 0) {
    ob_clean();
    echo json_encode(["success" => false, "message" => "Invalid category ID"]);
    exit;
}

try {
    error_log("Fetching content for user_id: $user_id, client_id: $client_id, category_id: $category_id");

    // Prepare and execute the query using PDO
    $stmt = $conn->prepare("
        SELECT edited_content 
        FROM juris_user_texts 
        WHERE user_id = :user_id AND client_id = :client_id AND category_id = :category_id 
        ORDER BY last_updated DESC 
        LIMIT 1
    ");
    $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);
    $stmt->bindParam(':client_id', $client_id, PDO::PARAM_INT);
    $stmt->bindParam(':category_id', $category_id, PDO::PARAM_INT);
    $stmt->execute();

    $row = $stmt->fetch(PDO::FETCH_ASSOC);

    ob_clean();
    if ($row) {
        echo json_encode(["success" => true, "content" => trim($row['edited_content'])]);
    } else {
        echo json_encode(["success" => false, "message" => "No content found"]);
    }
} catch (Exception $e) {
    error_log("Error fetching content: " . $e->getMessage());
    ob_clean();
    echo json_encode(["success" => false, "message" => "An error occurred while fetching content"]);
}
exit;
 

   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   
   
   // Display footnote if exists
    if (!empty($sectionData['footnote'])) {
        echo '<div class="footnote">' . htmlspecialchars($sectionData['footnote']) . '</div>';
    }

    echo '</div>';
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
</head>

<body id="body-pd" class="gap_right_content <?php echo $screen_options['layout']; ?>">
    <!-- Begin Navigation Bar -->
    <header class="header gradient-background" id="header">
        <div class="logo">
            <img src="../../public/user_assets/img/jurislocator-logo.png" alt="jurislocator" />
        </div>

        <link rel="stylesheet" href="../public/user_assets/img/bootstrap-icons-fonts">

        <div class="header_toggle"> 
            <i class="bi bi-list" id="header-toggle"></i> 
        </div>
        
        <div class="header-controls">
            <!-- Selected Client Display -->
            <div class="selected-client footer-header-text">
                <p id="client-focus-toggle" style="cursor: pointer;">
                    Client in Focus: <span id="current-client">
                        <?php echo isset($_SESSION['selected_client_name']) ? htmlspecialchars($_SESSION['selected_client_name']) : 'None'; ?>
                    </span>
                </p>
            </div>

            <!-- Combined Settings Dropdown -->
            <div class="settings-dropdown">
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
                <button class="settings-toggle" id="settings-toggle">
                    <i class="bi bi-gear settings_button"></i>  Settings <span class="down-arrow">&#9660;</span>
                </button>
            </div>

            <!-- Settings Panel -->
            <div id="settings-panel" class="hidden">
                <div class="settings-content">
                    <div class="settings-tabs">
                        <button class="tab-button active" data-tab="themes-tab">Themes</button>
                        <button class="tab-button" data-tab="screen-tab">Screen Options</button>
                    </div>

                    <!-- Themes Section -->
                    <div id="themes-tab" class="tab-content active">
                        <h3>Choose a Theme</h3>
                        <p>Select a theme to customize the appearance of the application.</p>
                        <div class="theme-options">
                            <ul class="theme-list">
                                <li>
                                    <button class="theme-btn theme-circle" data-theme="default">
                                        <span class="circle-indicator"></span>
                                    </button>
                                    <span class="theme-name">Default</span>
                                </li>
                                <li>
                                    <button class="theme-btn theme-circle" data-theme="dark">
                                        <span class="circle-indicator"></span>
                                    </button>
                                    <span class="theme-name">Dark Mode</span>
                                </li>
                                <li>
                                    <button class="theme-btn theme-circle" data-theme="blue">
                                        <span class="circle-indicator"></span>
                                    </button>
                                    <span class="theme-name">Blue Theme</span>
                                </li>
                                <li>
                                    <button class="theme-btn theme-circle" data-theme="green">
                                        <span class="circle-indicator"></span>
                                    </button>
                                    <span class="theme-name">Green Theme</span>
                                </li>
                            </ul>
                        </div>
                    </div>

                    <!-- Screen Options -->
                    <div id="screen-tab" class="tab-content">
                        <h3>Screen elements</h3>
                        <p>Some screen elements can be shown or hidden by using the checkboxes. Expand or collapse...</p>
                        <div class="widget-options">
                            <div class="option-item">
                                <input type="checkbox" id="widget-keyword_search" <?php echo isset($screen_options['keyword_search']) && $screen_options['keyword_search'] ? 'checked' : ''; ?>>
                                <label for="widget-keyword_search">Keyword Search</label>
                            </div>
                            <div class="option-item">
                                <input type="checkbox" id="widget-content_display_area" <?php echo isset($screen_options['content_display_area']) && $screen_options['content_display_area'] ? 'checked' : ''; ?>>
                                <label for="widget-content_display_area">Content Display Area</label>
                            </div>
                            <div class="option-item">
                                <input type="checkbox" id="widget-droppable_area" <?php echo isset($screen_options['droppable_area']) && $screen_options['droppable_area'] ? 'checked' : ''; ?>>
                                <label for="widget-droppable_area">Droppable Area</label>
                            </div>
                            <div class="option-item">
                                <input type="checkbox" id="widget-editor_container" <?php echo isset($screen_options['editor_container']) && $screen_options['editor_container'] ? 'checked' : ''; ?>>
                                <label for="widget-editor_container">Editor Container</label>
                            </div>
                        </div>

                        <h3>Layout</h3>
                        <div class="layout-options">
                            <div class="option-item">
                                <input type="radio" id="layout-default" name="layout" <?php echo (!isset($screen_options['layout']) || $screen_options['layout'] === 'default') ? 'checked' : ''; ?>>
                                <label for="layout-default">Default</label>
                            </div>
                            <div class="option-item">
                                <input type="radio" id="layout-compact" name="layout" <?php echo isset($screen_options['layout']) && $screen_options['layout'] === 'compact' ? 'checked' : ''; ?>>
                                <label for="layout-compact">Compact</label>
                            </div>
                        </div>

                        <h3>Additional settings</h3>
                        <div class="additional-settings">
                            <div class="option-item">
                                <input type="checkbox" id="sticky-header" <?php echo isset($screen_options['sticky_header']) && $screen_options['sticky_header'] ? 'checked' : ''; ?>>
                                <label for="sticky-header">Sticky header</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="header_img"> 
                <a href="../view/user_profile.php"><img src="../../public/user_assets/img/profile.jpg" alt=""></a> 
            </div>
        </div>
    </header>
        
    <div class="l-navbar" id="nav-bar">
        <nav class="nav">
            <div class="nav_list"> 
                <a href="../view/dashboard.php" class="nav_link active"> 
                    <i class='bx bx-grid-alt nav_icon'><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16"><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293zM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5z"/></svg></i> 
                    <span class="nav_name">Dashboard</span> 
                </a> 

                <a href="../view/view_templates.php" class="nav_link"> 
                    <i class='bx bx-message-square-detail nav_icon'><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark" viewBox="0 0 16 16"><path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5z"/></svg></i> 
                    <span class="nav_name">Templates</span> 
                </a> 

                <a href="../view/user_profile.php" class="nav_link"> 
                    <i class='bx bx-user nav_icon'><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16"><path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0"/><path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1"/></svg></i> 
                    <span class="nav_name">Users</span> 
                </a>

                <a href="#" class="nav_link"> 
                    <i class='bx bx-bookmark nav_icon'><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bookmark-check-fill" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M2 15.5V2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.74.439L8 13.069l-5.26 2.87A.5.5 0 0 1 2 15.5m8.854-9.646a.5.5 0 0 0-.708-.708L7.5 7.793 6.354 6.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0z"/></svg></i> 
                    <span class="nav_name">Bookmark</span> 
                </a>

                <a href="#" class="nav_link"> 
                    <i class='bx bx-folder nav_icon'><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-card-checklist" viewBox="0 0 16 16"><path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2z"/><path d="M7 5.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5m-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0M7 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5m-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 0 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0"/></svg></i> 
                    <span class="nav_name">Files</span> 
                </a>

                <a href="#" class="nav_link"> 
                    <i class='bx bx-bar-chart-alt-2 nav_icon'><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-activity" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M6 2a.5.5 0 0 1 .47.33L10 12.036l1.53-4.208A.5.5 0 0 1 12 7.5h3.5a.5.5 0 0 1 0 1h-3.15l-1.88 5.17a.5.5 0 0 1-.94 0L6 3.964 4.47 8.171A.5.5 0 0 1 4 8.5H.5a.5.5 0 0 1 0-1h3.15l1.88-5.17A.5.5 0 0 1 6 2"/></svg></i> 
                    <span class="nav_name">Stats</span> 
                </a>
            </div>

            <a href="../../logout.php" class="nav_link" id="logout-link"> 
                <i class='bx bx-log-out nav_icon'><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-left" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M6 12.5a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-8a.5.5 0 0 0-.5.5v2a.5.5 0 0 1-1 0v-2A1.5 1.5 0 0 1 6.5 2h8A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-8A1.5 1.5 0 0 1 5 12.5v-2a.5.5 0 0 1 1 0z"/><path fill-rule="evenodd" d="M.146 8.354a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L1.707 7.5H10.5a.5.5 0 0 1 0 1H1.707l2.147 2.146a.5.5 0 0 1-.708.708z"/></svg></i>
                <span class="nav_name">SignOut</span> 
            </a>
        </nav>
    </div>
    <!-- End Navigation Bar -->

    <!-- Main Content -->
    <div class="main-content container-fluid">
        <div class="row no-gutters">
            <?php if($screen_options['content_display_area']): ?>
            <div class="content-display-area gap_left_right <?php echo $screen_options['right_side_container'] ? 'col-lg-8' : 'col-lg-12'; ?>">
                <!-- Search Bar -->
                <div id="keyword-search" class="widget_custom bg_custom gap_top card">
                    <div class="card-body">
                        <nav class="top-nav">
                            <a href="../view/home.php" class="home-link">← Back to Documents</a>
                        </nav>

                        <!-- Basic Search Container -->
                        <div id="basic-search-container">
                            <form id="search-form" class="d-flex gap-2">
                                <input type="text" id="keyword" name="keyword" class="form-control" placeholder="Enter keywords">
                                <input type="hidden" id="current-table" name="current_table" value="<?php echo htmlspecialchars($category_id); ?>">
                                <button type="submit" class="btn btn-custom">Search</button>
                            </form>
                            <button type="button" class="btn btn-link" id="advanced-search-btn">Advanced Search</button>
                        </div>
                        
                        <!-- Advanced Search Container -->
                        <div class="advanced-search-container d-none">
                            <button type="button" class="btn btn-link" id="basic-search-btn">Back to Basic Search</button>
                            <form id="advanced-search-form" class="mt-3">
                                <!-- Full-width Keywords Field -->
                                <div class="col-md-12 mb-3">
                                    <label for="advanced-keyword">Keywords</label>
                                    <input type="text" id="advanced-keyword" name="keyword" class="form-control" placeholder="Enter keywords">
                                </div>
                                
                                <!-- Two-column Layout -->
                                <div class="row">
                                    <!-- Left Column: Select Documents -->
                                    <div class="col-md-4 mb-3">
                                        <label for="act-names-select">Select Documents to Search</label>
                                        <select class="select2Multiselect" multiple id="act-names-select" name="selected_tables[]">
                                            <!-- Act names will be dynamically populated here -->
                                        </select>
                                    </div>

                                    <!-- Right Column: Filters -->
                                    <div class="col-md-4">
                                        <div class="row">
                                            <div class="col-md-12 mb-3">
                                                <label for="exact-phrase">Exact Phrase</label>
                                                <input type="text" id="exact-phrase" name="exact_phrase" class="form-control">
                                            </div>
                                            <div class="col-md-12 mb-3">
                                                <label for="with-these-words">With These Words</label>
                                                <input type="text" id="with-these-words" name="with_these_words" class="form-control">
                                            </div>
                                            <div class="col-md-12 mb-3">
                                                <label for="except-these-words">Except These Words</label>
                                                <input type="text" id="except-these-words" name="except_these_words" class="form-control">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="row">
                                            <div class="col-md-12 mb-3">
                                                <label for="title-search">Search by Title</label>
                                                <input type="text" id="title-search" name="title" class="form-control">
                                            </div>
                                            <div class="col-md-12 mb-3">
                                                <label for="section-search">Search by Section</label>
                                                <input type="text" id="section-search" name="section" class="form-control">
                                            </div>
                                            <div class="col-md-12 mb-3">
                                                <label for="sub-section-search">Search by Sub-Section</label>
                                                <input type="text" id="sub-section-search" name="sub_section" class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="col-md-12 mb-3 text-end">
                                    <button type="submit" class="btn btn-custom">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <!-- Information Message -->
                    <div class="col-md-12 px-4">
                        <div class="alert alert-info alert-dismissible fade show mt-3" role="alert" style="width: 100% !important; margin-bottom: 20px;">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Tip:</strong> When viewing popups with reference links, you'll notice <b>a "🏳️" flag icon</b>. This icon allows you to <b>report</b> if you find that a reference link is not relevant or incorrect.
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    </div>
                </div>

                <!-- Loading Container -->
                <div class="loading-container">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <!-- Content Display Area -->
                <div id="content" class="widget_custom bg_custom card gap_top">

                <script>
                $(document).ready(function() {
                    // Initialize select2
                    $('.select2Multiselect').select2();
                    var loadingContainer = $('.loading-container');
                    var searchTimeout;

                    // Load act names for select dropdown
                    $.ajax({
                        url: '../api/search.php',
                        method: 'GET',
                        data: { action: 'getActNames' },
                        success: function(response) {
                            try {
                                const actNames = JSON.parse(response);
                                const select = $('#act-names-select');
                                actNames.forEach(function(name) {
                                    select.append(new Option(name, name));
                                });
                                select.trigger('change');
                            } catch (e) {
                                console.error('Error parsing act names:', e);
                            }
                        }
                    });

                    // Toggle between basic and advanced search
                    $("#advanced-search-btn").click(function() {
                        $("#basic-search-container").addClass("d-none");
                        $(".advanced-search-container").removeClass("d-none");
                    });

                    $("#basic-search-btn").click(function() {
                        $("#basic-search-container").removeClass("d-none");
                        $(".advanced-search-container").addClass("d-none");
                    });

                    // Common search function
                    function performSearch(data) {
                        loadingContainer.addClass("active");
                        
                        if (searchTimeout) {
                            clearTimeout(searchTimeout);
                        }

                        searchTimeout = setTimeout(function() {
                            $.ajax({
                                url: '../api/search.php',
                                method: 'POST',
                                data: data,
                                success: function(response) {
                                    loadingContainer.removeClass("active");
                                    $("#content").html(response);
                                    
                                    $(".act-container").each(function(index) {
                                        $(this).css("animation-delay", `${0.1 * (index + 1)}s`);
                                    });

                                    if (typeof initializePopups === "function") {
                                        initializePopups();
                                    }
                                },
                                error: function(xhr, status, error) {
                                    loadingContainer.removeClass("active");
                                    console.error("Search Error:", error);
                                    alert("An error occurred while searching. Please try again.");
                                }
                            });
                        }, 800);
                    }

                    // Basic Search form submission
                    $("#search-form").on("submit", function(e) {
                        e.preventDefault();
                        var keyword = $("#keyword").val();

                        if (!keyword.trim()) {
                            alert("Please enter a keyword to search.");
                            $("#keyword").focus();
                            return;
                        }

                        performSearch({
                            keyword: keyword,
                            table: $("#current-table").val(),
                            search_type: 'basic'
                        });
                    });

                    // Advanced search form submission
                    $("#advanced-search-form").on("submit", function(e) {
                        e.preventDefault();
                        var formData = {
                            keyword: $("#advanced-keyword").val(),
                            exact_phrase: $("#exact-phrase").val(),
                            with_these_words: $("#with-these-words").val(),
                            except_these_words: $("#except-these-words").val(),
                            title: $("#title-search").val(),
                            section: $("#section-search").val(),
                            sub_section: $("#sub-section-search").val(),
                            selected_tables: $("#act-names-select").val(),
                            search_type: 'advanced'
                        };

                        if (!formData.keyword && !formData.exact_phrase && !formData.with_these_words && 
                            !formData.except_these_words && !formData.title && !formData.section && 
                            !formData.sub_section) {
                            alert("Please fill at least one search field.");
                            return;
                        }

                        performSearch(formData);
                    });
                });
                </script>
                    <div class="card-body content-area">
                        <?php
                        // Initialize total pages variable
                        $totalPages = 1;
                        
                        // Get current page from URL
                        $page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
                        
                        // Show pagination controls at the top
                        echo renderPaginationControls($page, $totalPages, $category_id);

                        // Render standalone sections only if we are on the first page
                        if ($page === 1) {
                            $standaloneData = getStandaloneSections($conn, $table, $category_id);
                            echo renderStandaloneSections($standaloneData, $category_id, $table);
                        }

                        // Get sorted data for current page
                        $rows = getSortedLegalHierarchy($conn, $table, $category_id, $page, $totalPages);
                        
                        // Process the sorted data into hierarchical structure
                        $data = [];
                        $currentPart = null;
                        $currentDivision = null;
                        $currentSubDivision = null;

                        if (!empty($rows)) {
                            foreach ($rows as $row) {
                                if ($row["part"] !== null) {
                                    // Initialize part if not exists
                                    if (!isset($data[$row["part"]])) {
                                        $data[$row["part"]] = [
                                            "title" => $row["title"],
                                            "divisions" => [],
                                            "sections" => [], // Add direct sections array
                                        ];
                                    }

                                    // Handle direct sections under part (no division/subdivision)
                                    if ($row["section"] !== null && empty($row["division"]) && empty($row["sub_division"])) {
                                        if (!isset($data[$row["part"]]["sections"][$row["section"]])) {
                                            $data[$row["part"]]["sections"][$row["section"]] = [
                                                "title" => $row["title"],
                                                "text_content" => $row["text_content"],
                                                "subsections" => [],
                                                "paragraphs" => [], // Direct paragraphs under section
                                                "footnote" => $row["footnote"],
                                            ];
                                        }

                                        // Handle paragraphs directly under section (when no subsection exists)
                                        if ($row["paragraph"] !== null && empty($row["sub_section"])) {
                                            if (!isset($data[$row["part"]]["sections"][$row["section"]]["paragraphs"][$row["paragraph"]])) {
                                                $data[$row["part"]]["sections"][$row["section"]]["paragraphs"][$row["paragraph"]] = [
                                                    "paragraph" => $row["paragraph"],
                                                    "text_content" => $row["text_content"],
                                                    "sub_paragraphs" => [],
                                                    "footnote" => $row["footnote"],
                                                ];
                                            }

                                            // Handle sub-paragraphs under direct paragraphs
                                            if ($row["sub_paragraph"] !== null) {
                                                $data[$row["part"]]["sections"][$row["section"]]["paragraphs"][$row["paragraph"]]["sub_paragraphs"][] = [
                                                    "sub_paragraph" => $row["sub_paragraph"],
                                                    "text_content" => $row["text_content"],
                                                    "footnote" => $row["footnote"],
                                                ];
                                            }
                                        }

                                        // Handle subsections
                                        if ($row["sub_section"] !== null) {
                                            if (!isset($data[$row["part"]]["sections"][$row["section"]]["subsections"][$row["sub_section"]])) {
                                                $data[$row["part"]]["sections"][$row["section"]]["subsections"][$row["sub_section"]] = [
                                                    "title" => $row["title"],
                                                    "text_content" => $row["text_content"],
                                                    "paragraphs" => [],
                                                    "footnote" => $row["footnote"],
                                                ];
                                            }

                                            // Handle paragraphs under subsection
                                            if ($row["paragraph"] !== null) {
                                                if (!isset($data[$row["part"]]["sections"][$row["section"]]["subsections"][$row["sub_section"]]["paragraphs"][$row["paragraph"]])) {
                                                    $data[$row["part"]]["sections"][$row["section"]]["subsections"][$row["sub_section"]]["paragraphs"][$row["paragraph"]] = [
                                                        "paragraph" => $row["paragraph"],
                                                        "text_content" => $row["text_content"],
                                                        "sub_paragraphs" => [],
                                                        "footnote" => $row["footnote"],
                                                    ];
                                                }

                                                // Handle sub-paragraphs under subsection paragraphs
                                                if ($row["sub_paragraph"] !== null) {
                                                    $data[$row["part"]]["sections"][$row["section"]]["subsections"][$row["sub_section"]]["paragraphs"][$row["paragraph"]]["sub_paragraphs"][] = [
                                                        "sub_paragraph" => $row["sub_paragraph"],
                                                        "text_content" => $row["text_content"],
                                                        "footnote" => $row["footnote"],
                                                    ];
                                                }
                                            }
                                        }
                                    }
                                    // Handle division structure
                                    elseif ($row["division"] !== null) {
                                        if (!isset($data[$row["part"]]["divisions"][$row["division"]])) {
                                            $data[$row["part"]]["divisions"][$row["division"]] = [
                                                "title" => $row["title"],
                                                "sub_divisions" => [],
                                            ];
                                        }

                                        if ($row["sub_division"] !== null) {
                                            if (!isset($data[$row["part"]]["divisions"][$row["division"]]["sub_divisions"][$row["sub_division"]])) {
                                                $data[$row["part"]]["divisions"][$row["division"]]["sub_divisions"][$row["sub_division"]] = [
                                                    "title" => $row["title"],
                                                    "sections" => [],
                                                ];
                                            }

                                            if ($row["section"] !== null) {
                                                if (!isset($data[$row["part"]]["divisions"][$row["division"]]["sub_divisions"][$row["sub_division"]]["sections"][$row["section"]])) {
                                                    $data[$row["part"]]["divisions"][$row["division"]]["sub_divisions"][$row["sub_division"]]["sections"][$row["section"]] = [
                                                        "title" => $row["title"],
                                                        "text_content" => $row["text_content"],
                                                        "subsections" => [],
                                                        "paragraphs" => [],
                                                        "sub_paragraphs" => [],
                                                        "footnote" => $row["footnote"],
                                                    ];
                                                }

                                                if ($row["sub_section"] !== null) {
                                                    if (!isset($data[$row["part"]]["divisions"][$row["division"]]["sub_divisions"][$row["sub_division"]]["sections"][$row["section"]]["subsections"][$row["sub_section"]])) {
                                                        $data[$row["part"]]["divisions"][$row["division"]]["sub_divisions"][$row["sub_division"]]["sections"][$row["section"]]["subsections"][$row["sub_section"]] = [
                                                            "title" => $row["title"],
                                                            "text_content" => $row["text_content"],
                                                            "paragraphs" => [],
                                                            "sub_paragraphs" => [],
                                                            "footnote" => $row["footnote"],
                                                        ];
                                                    }

                                                    if ($row["paragraph"] !== null) {
                                                        if (!isset($data[$row["part"]]["divisions"][$row["division"]]["sub_divisions"][$row["sub_division"]]["sections"][$row["section"]]["subsections"][$row["sub_section"]]["paragraphs"][$row["paragraph"]])) {
                                                            $data[$row["part"]]["divisions"][$row["division"]]["sub_divisions"][$row["sub_division"]]["sections"][$row["section"]]["subsections"][$row["sub_section"]]["paragraphs"][$row["paragraph"]] = [
                                                                "paragraph" => $row["paragraph"],
                                                                "text_content" => $row["text_content"],
                                                                "sub_paragraphs" => [],
                                                                "footnote" => $row["footnote"],
                                                            ];
                                                        }

                                                        if ($row["sub_paragraph"] !== null) {
                                                            $data[$row["part"]]["divisions"][$row["division"]]["sub_divisions"][$row["sub_division"]]["sections"][$row["section"]]["subsections"][$row["sub_section"]]["paragraphs"][$row["paragraph"]]["sub_paragraphs"][] = [
                                                                "sub_paragraph" => $row["sub_paragraph"],
                                                                "text_content" => $row["text_content"],
                                                                "footnote" => $row["footnote"],
                                                            ];
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        // Generate HTML output
                        foreach ($data as $partNumber => $part) {
                            // Only display part header if it's different from current part or at start of page
                            if ($currentPart != $partNumber) {
                                echo "<h2>Part {$partNumber}: " . makeLinksClickable($part["title"], $category_id) . "</h2>";
                                $currentPart = $partNumber;
                            }

                            // First handle direct sections under part
                            if (!empty($part["sections"])) {
                                foreach ($part["sections"] as $sectionNumber => $section) {
                                    echo "<div class='section-container'>";
                                    // Display section title if exists
                                    if (!empty($section["title"])) {
                                        echo "<h5>" . makeLinksClickable($section["title"], $category_id) . "</h5>";
                                    }

                                    // Handle section content display with proper subsection integration
                                    if (!empty($section["text_content"])) {
                                        echo "<p><b>{$sectionNumber}</b> " . makeLinksClickable($section["text_content"], $category_id, $sectionNumber) . "</p>";
                                    } elseif (!empty($section["subsections"])) {
                                        // If no direct content but has subsections, display first subsection's content with section number
                                        $firstSubSection = reset($section["subsections"]);
                                        $firstSubSectionNumber = key($section["subsections"]);
                                        if (!empty($firstSubSection["title"])) {
                                            echo "<h5>" . makeLinksClickable($firstSubSection["title"], $category_id) . "</h5>";
                                        }
                                        if (!empty($firstSubSection["text_content"])) {
                                            echo "<p><b>{$sectionNumber}{$firstSubSectionNumber}</b> " . makeLinksClickable($firstSubSection["text_content"], $category_id, "{$sectionNumber}({$firstSubSectionNumber})") . "</p>";
                                        }

                                        // Handle remaining subsections
                                        $isFirst = true;
                                        foreach ($section["subsections"] as $subsectionNumber => $subsection) {
                                            if ($isFirst) {
                                                $isFirst = false;
                                                continue; // Skip first subsection as it's already displayed
                                            }

                                            if (!empty($subsection["text_content"])) {
                                                if (!empty($subsection["title"])) {
                                                    echo "<h5>" . makeLinksClickable($subsection["title"], $category_id) . "</h5>";
                                                }
                                                echo "<p><b>{$sectionNumber}({$subsectionNumber})</b> " . makeLinksClickable($subsection["text_content"], $category_id, "{$sectionNumber}({$subsectionNumber})") . "</p>";
                                            }

                                            // Handle subsection paragraphs
                                            if (!empty($subsection["paragraphs"])) {
                                                foreach ($subsection["paragraphs"] as $paragraph) {
                                                    echo "<ul><b>{$paragraph["paragraph"]}</b> " . makeLinksClickable($paragraph["text_content"], $category_id, "{$sectionNumber}({$subsectionNumber})({$paragraph["paragraph"]})") . "</ul>";

                                                    // Handle sub-paragraphs
                                                    if (!empty($paragraph["sub_paragraphs"])) {
                                                        foreach ($paragraph["sub_paragraphs"] as $subParagraph) {
                                                            echo "<ul><b>{$subParagraph["sub_paragraph"]}</b> " . makeLinksClickable($subParagraph["text_content"], $category_id, "{$sectionNumber}({$subsectionNumber})({$paragraph["paragraph"]})({$subParagraph["sub_paragraph"]})") . "</ul>";
                                                        }
                                                    }
                                                }
                                            }

                                            // Display subsection footnote if exists
                                            if (!empty($subsection["footnote"])) {
                                                echo "<p class='footnote' data-category-id='{$category_id}'><em>" . html_entity_decode($subsection["footnote"]) . "</em></p>";
                                            }
                                        }
                                    }

                                    // Handle paragraphs directly under section
                                    if (!empty($section["paragraphs"])) {
                                        foreach ($section["paragraphs"] as $paragraph) {
                                            echo "<ul><b>{$paragraph["paragraph"]}</b> " . makeLinksClickable($paragraph["text_content"], $category_id, "{$sectionNumber}({$paragraph["paragraph"]})") . "</ul>";

                                            // Render sub-paragraphs
                                            if (!empty($paragraph["sub_paragraphs"])) {
                                                foreach ($paragraph["sub_paragraphs"] as $subParagraph) {
                                                    echo "<ul><b>{$subParagraph["sub_paragraph"]}</b> " . makeLinksClickable($subParagraph["text_content"], $category_id, "{$sectionNumber}({$paragraph["paragraph"]})({$subParagraph["sub_paragraph"]})") . "</ul>";
                                                }
                                            }
                                        }
                                    }

                                    // Display section footnote if exists
                                    if (!empty($section["footnote"])) {
                                        echo "<p class='footnote' data-category-id='{$category_id}'><em>" . html_entity_decode($section["footnote"]) . "</em></p>";
                                    }
                                    echo "</div>";
                                }
                            }

                            // Then handle divisions if they exist
                            if (!empty($part["divisions"])) {
                                foreach ($part["divisions"] as $divisionNumber => $division) {
                                    // Only display division header if it's different from current division or at start of page
                                    if ($currentDivision != $divisionNumber) {
                                        echo "<h3>Division {$divisionNumber}</h3>";
                                        echo "<h3>" . makeLinksClickable($division["title"], $category_id) . "</h3>";
                                        $currentDivision = $divisionNumber;
                                    }

                                    if (!empty($division["sub_divisions"])) {
                                        foreach ($division["sub_divisions"] as $subDivisionNumber => $subDivision) {
                                            // Only display subdivision if it's different from current subdivision or at start of page
                                            if ($currentSubDivision != $subDivisionNumber) {
                                                if ($subDivision["title"] !== $division["title"]) {
                                                    echo "<h3>" . makeLinksClickable($subDivision["title"], $category_id) . "</h3>";
                                                }
                                                $currentSubDivision = $subDivisionNumber;
                                            }

                                            if (!empty($subDivision["sections"])) {
                                                foreach ($subDivision["sections"] as $sectionNumber => $section) {
                                                    echo "<div class='section-container'>";

                                                    if (!empty($section["title"])) {
                                                        echo "<h5>" . makeLinksClickable($section["title"], $category_id) . "</h5>";
                                                    }

                                                    if (!empty($section["text_content"])) {
                                                        echo "<p><b>{$sectionNumber}</b> " . makeLinksClickable($section["text_content"], $category_id, $sectionNumber) . "</p>";
                                                    }

                                                    // Process subsections
                                                    if (!empty($section["subsections"])) {
                                                        foreach ($section["subsections"] as $subsectionNumber => $subsection) {
                                                            if (!empty($subsection["text_content"])) {
                                                                if (!empty($subsection["title"])) {
                                                                    echo "<h5>" . makeLinksClickable($subsection["title"], $category_id) . "</h5>";
                                                                }
                                                                echo "<p><b>{$sectionNumber}({$subsectionNumber})</b> " . makeLinksClickable($subsection["text_content"], $category_id, "{$sectionNumber}({$subsectionNumber})") . "</p>";
                                                            }

                                                            // Handle paragraphs under subsection
                                                            if (!empty($subsection["paragraphs"])) {
                                                                foreach ($subsection["paragraphs"] as $paragraph) {
                                                                    echo "<ul><b>{$paragraph["paragraph"]}</b> " . makeLinksClickable($paragraph["text_content"], $category_id, "{$sectionNumber}({$subsectionNumber})({$paragraph["paragraph"]})");

                                                                    if (!empty($paragraph["sub_paragraphs"])) {
                                                                        foreach ($paragraph["sub_paragraphs"] as $subParagraph) {
                                                                            echo "<ul><b>{$subParagraph["sub_paragraph"]}</b> " . makeLinksClickable($subParagraph["text_content"], $category_id, "{$sectionNumber}({$subsectionNumber})({$paragraph["paragraph"]})({$subParagraph["sub_paragraph"]})") . "</ul>";
                                                                        }
                                                                    }
                                                                    echo "</ul>";
                                                                }
                                                            }

                                                            if (!empty($subsection["footnote"])) {
                                                                echo "<p class='footnote' data-category-id='{$category_id}'><em>" . html_entity_decode($subsection["footnote"]) . "</em></p>";
                                                            }
                                                        }
                                                    }

                                                    // Handle paragraphs directly under section
                                                    if (!empty($section["paragraphs"])) {
                                                        foreach ($section["paragraphs"] as $paragraph) {
                                                            echo "<ul><b>{$paragraph["paragraph"]}</b> " . makeLinksClickable($paragraph["text_content"], $category_id, "{$sectionNumber}({$paragraph["paragraph"]})");

                                                            if (!empty($paragraph["sub_paragraphs"])) {
                                                                foreach ($paragraph["sub_paragraphs"] as $subParagraph) {
                                                                    echo "<ul><b>{$subParagraph["sub_paragraph"]}</b> " . makeLinksClickable($subParagraph["text_content"], $category_id, "{$sectionNumber}({$paragraph["paragraph"]})({$subParagraph["sub_paragraph"]})") . "</ul>";
                                                                }
                                                            }

                                                            echo "</ul>";
                                                        }
                                                    }

                                                    if (!empty($section["footnote"])) {
                                                        echo "<p class='footnote' data-category-id='{$category_id}'><em>" . html_entity_decode($section["footnote"]) . "</em></p>";
                                                    }

                                                    echo "</div>";
                                                }
                                            }
                                        }
                                    } else {
                                        // If no sub_divisions, directly process sections under the division
                                        if (!empty($division["sections"])) {
                                            foreach ($division["sections"] as $sectionNumber => $section) {
                                                echo "<div class='section-container'>";
                                                if (!empty($section["title"])) {
                                                    echo "<h5>" . makeLinksClickable($section["title"], $category_id) . "</h5>";
                                                }

                                                if (!empty($section["text_content"])) {
                                                    echo "<p><b>{$sectionNumber}</b> " . makeLinksClickable($section["text_content"], $category_id, $sectionNumber) . "</p>";
                                                }

                                                // Process subsections
                                                if (!empty($section["subsections"])) {
                                                    foreach ($section["subsections"] as $subsectionNumber => $subsection) {
                                                        if (!empty($subsection["text_content"])) {
                                                            echo "<p><b>{$sectionNumber}({$subsectionNumber})</b> " . makeLinksClickable($subsection["text_content"], $category_id, "{$sectionNumber}({$subsectionNumber})") . "</p>";
                                                        }

                                                        // Handle paragraphs under subsection
                                                        if (!empty($subsection["paragraphs"])) {
                                                            foreach ($subsection["paragraphs"] as $paragraph) {
                                                                echo "<ul><li><b>{$paragraph["paragraph"]}</b> " . makeLinksClickable($paragraph["text_content"], $category_id, "{$sectionNumber}({$subsectionNumber})({$paragraph["paragraph"]})") . "</li>";

                                                                if (!empty($paragraph["sub_paragraphs"])) {
                                                                    foreach ($paragraph["sub_paragraphs"] as $subParagraph) {
                                                                        echo "<li><b>{$subParagraph["sub_paragraph"]}</b> " . makeLinksClickable($subParagraph["text_content"], $category_id, "{$sectionNumber}({$subsectionNumber})({$paragraph["paragraph"]})({$subParagraph["sub_paragraph"]})") . "</li>";
                                                                    }
                                                                }
                                                                echo "</ul>";
                                                            }
                                                        }
                                                    }
                                                }

                                                // Render footnotes if present
                                                if (!empty($section["footnote"])) {
                                                    echo "<p class='footnote' data-category-id='{$category_id}'><em>" . html_entity_decode($section["footnote"]) . "</em></p>";
                                                }

                                                echo "</div>";
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        // Show pagination controls at the bottom
                        echo renderPaginationControls($page, $totalPages, $category_id);
                        ?>
                    </div>
                </div>
            </div>
            <?php endif; ?>

            <?php if($screen_options['right_side_container']): ?>
            <div class="right-side-container gap_top col-lg-4">
                <!-- Droppable Area -->
                <div class="sticky-container">
                    <div id="drag-area-right" class="widget_custom bg_custom droppable-area card">
                        <div class="card-body">
                            <div class="nested-droppable">
                                <h5 class="card-title">Drop here:</h5>
                            </div>
                        </div>
                    </div>

                    <!-- Editor Container -->
                    <div class="editor-container widget_custom bg_custom gap_top card">
                        <div class="card-body">
                            <textarea id="tiny-editor"></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <?php endif; ?>
        </div>
    </div>

    <!-- Popup Template -->
    <div id="popup-template" class="popup" style="display: none;">
        <div class="popup-title">
            <span class="title-text"></span>
            <span class="copy" title="Copy content">
                <i class="fas fa-copy"></i>
            </span>
            <span class="arrow">▼</span>
            <span class="close">✖</span>
        </div>
        <div class="content-body" style="width: 100%;padding: 10px;max-height: 200px;">
            <p class="popup-content"></p>
        </div>
    </div>

    <!-- Loading Container -->
    <div class="loading-container">
        <div class="loading-spinner"></div>
        <div class="loading-text">Searching documents...</div>
    </div>

    <script>
        var fullHierarchicalData = <?php echo json_encode($data); ?>;
        var screenOptions = <?php echo json_encode($screen_options); ?>;

        function changePage(page, category_id) {
            const url = new URL(window.location.href);
            url.searchParams.set('page', page);
            url.searchParams.set('category_id', category_id);
            window.location.href = url.toString();
        }

        // Apply screen options on load
        document.addEventListener('DOMContentLoaded', function() {
            // Apply sticky header if enabled
            if(screenOptions.sticky_header) {
                document.querySelector('header').classList.add('sticky');
            }
        });

        ///////////////////////////////////////////////////////////////script.js/////////////////////////////////////////////////////////////////////////

        $(function () {
  console.log("Script loaded");

  $(".view-mode-btn").on("click", function () {
    $(".view-mode-btn").removeClass("active-view");
    $(this).addClass("active-view");
  });

  $(".view-mode-btn").on("click", function () {
    // Remove active class from all buttons
    $(".view-mode-btn").removeClass("active");

    // Add active class to the clicked button
    $(this).addClass("active");

    // Toggle between Grid and List views
    const viewMode = $(this).data("view-mode");
    $(".grid-view").css("display", viewMode === "grid" ? "grid" : "none");
    $(".list-view").css("display", viewMode === "list" ? "flex" : "none");
  });

  var popupZIndex = 10;

  var activePopups = {}; // Store section-category key with a count

  function canOpenPopup(popupKey) {
    return !activePopups[popupKey] || activePopups[popupKey] < 10;
  }

  function makeDraggable(popup) {
    $(popup).draggable({
      handle: ".popup-title",
      containment: "window",
      start: function () {
        $(this).css("z-index", ++popupZIndex);
      },
    });
  }

  $(".nested-droppable").droppable({
    accept: ".popup",
    hoverClass: "ui-state-highlight",
    drop: function (event, ui) {
      var $this = $(this);
      if (!ui.helper.hasClass("pinned")) {
        $this.append(ui.helper);
        ui.helper
          .css({
            position: "relative",
            top: "auto",
            left: "auto",
            width: "100%",
          })
          .addClass("pinned");
        ui.helper.draggable("option", "disabled", true);
      }
      $this
        .sortable({
          items: ".popup",
          handle: ".popup-title",
          placeholder: "ui-state-highlight",
          forcePlaceholderSize: true,
          update: function () {
            ui.item.css({
              width: "100%",
              position: "relative",
              top: "auto",
              left: "auto",
            });
            console.log("Popup order updated.");
          },
        })
        .sortable("refresh");
    },
  });

  // TinyMCE initialization
  tinymce.init({
    selector: "#tiny-editor",
    height: 380,
    menubar: false,
    plugins: [
      "advlist",
      "autolink",
      "lists",
      "link",
      "image",
      "charmap",
      "preview",
      "searchreplace",
      "visualblocks",
      "code",
      "fullscreen",
      "insertdatetime",
      "table",
      "help",
      "wordcount",
    ],
    toolbar:
      "copy savedb loaddb | undo redo | formatselect | " +
      "bold italic underline forecolor backcolor | alignleft aligncenter " +
      "alignright alignjustify | bullist numlist outdent indent | " +
      "lineheight | removeformat | help",
    lineheight_formats: "1 1.2 1.5 2 2.5 3",
    content_style:
      "body { font-family:Helvetica,Arial,sans-serif; font-size:14px; }",
    branding: false,
    statusbar: false,
    setup: function (editor) {
      // Add custom toolbar buttons
      editor.ui.registry.addIcon(
        "copy-content",
        '<svg width="24" height="24" viewBox="0 0 24 24"><path d="M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM19 5H8C6.9 5 6 5.9 6 7V21C6 22.1 6.9 23 8 23H19C20.1 23 21 22.1 21 21V7C21 5.9 20.1 5 19 5ZM19 21H8V7H19V21Z"/></svg>'
      );
      editor.ui.registry.addIcon(
        "save-db",
        '<svg width="24" height="24" viewBox="0 0 24 24"><path d="M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"/></svg>'
      );
      editor.ui.registry.addIcon(
        "load-db",
        '<svg width="24" height="24" viewBox="0 0 24 24"><path d="M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6-7.67l2.59 2.58L17 8.5l-5-5-5 5 1.41-1.41L11 7.33V17h2z"/></svg>'
      );

      editor.ui.registry.addButton("copy", {
        icon: "copy-content",
        tooltip: "Copy all content",
        onAction: function () {
          const content = editor.getContent();
          const $temp = $("<div>")
            .css({
              position: "absolute",
              left: "-9999px",
              top: "0",
            })
            .html(content)
            .appendTo("body");

          try {
            document.execCommand("copy");
            showSuccessMessage("Content copied!");
          } catch (err) {
            handleError(err);
          } finally {
            $temp.remove();
          }
        },
      });

      editor.ui.registry.addButton("savedb", {
        icon: "save-db",
        tooltip: "Save to database",
        onAction: function () {
          const content = editor.getContent();

          $.post(
            BASE_URL + "/jurislocator_version_1.0/user/api/save_text.php",
            {
              edited_content: content,
              category_id: 1, // Update this dynamically if needed
              client_id: window.selectedClientId, // Ensure client selection is used
            }
          )
            .done(function (response) {
              console.log("RAW Response from save_text.php:", response);

              if (typeof response === "string") {
                try {
                  response = JSON.parse(response);
                } catch (error) {
                  console.error("JSON Parsing Error:", error, response);
                  alert("Invalid JSON response from the server.");
                  return;
                }
              }

              if (response.success) {
                showSuccessMessage("Content saved to database!");
              } else {
                console.error("Server error:", response.message);
                alert("Failed to save content.");
              }
            })
            .fail(function (xhr, status, error) {
              console.error("AJAX error:", xhr.status, error);
              alert("Error: " + xhr.status + " " + error);
            });
        },
      });

      editor.ui.registry.addButton("loaddb", {
        icon: "load-db",
        tooltip: "Load latest from database",
        onAction: function () {
          $.get(BASE_URL + "/jurislocator_version_1.0/user/api/get_text.php", {
            category_id: 1, // Update dynamically
            client_id: window.selectedClientId,
          })
            .done(function (response) {
              console.log("RAW Response from get_text.php:", response);

              if (typeof response === "string") {
                try {
                  response = JSON.parse(response);
                } catch (error) {
                  console.error("JSON Parsing Error:", error, response);
                  alert("Invalid JSON response from the server.");
                  return;
                }
              }

              if (response.success && response.content) {
                editor.setContent(response.content);
                localStorage.setItem("tinymce-content", response.content);
                showSuccessMessage("Content loaded from database!");
              } else {
                console.error("Server error:", response.message);
                alert("No content found.");
              }
            })
            .fail(function (xhr, status, error) {
              console.error("AJAX error:", xhr.status, error);
              alert("Error: " + xhr.status + " " + error);
            });
        },
      });

      // Initialize with blank content
      editor.on("init", function () {
        // Check if a client is selected
        const currentClient = document.getElementById("current-client");

        if (currentClient && currentClient.textContent.trim() === "None") {
          // No client selected, start with empty editor
          editor.setContent("");
          localStorage.removeItem("tinymce-content");
        } else {
          // Client selected, attempt to load from localStorage as fallback
          const savedContent = localStorage.getItem("tinymce-content");
          if (savedContent) {
            editor.setContent(savedContent);
          }

          // Try to load latest content for selected client
          if (window.selectedClientId) {
            $.get(
              BASE_URL + "/jurislocator_version_1.0/user/api/get_text.php",
              {
                category_id: 1,
                client_id: window.selectedClientId,
              }
            ).done(function (response) {
              if (typeof response === "string") {
                try {
                  response = JSON.parse(response);
                } catch (error) {
                  return;
                }
              }

              if (response.success && response.content) {
                editor.setContent(response.content);
                localStorage.setItem("tinymce-content", response.content);
              }
            });
          }
        }
      });

      // Save to localStorage on change
      editor.on("change", function () {
        localStorage.setItem("tinymce-content", editor.getContent());
      });
    },
  });

  // Centralized configuration for popup management
  const PopupManager = {
    popupZIndex: 10,
    activePopups: {}, // Store section-category key with a count
    maxPopupsPerKey: 10,

    canOpenPopup: function (popupKey) {
      return (
        !this.activePopups[popupKey] ||
        this.activePopups[popupKey] < this.maxPopupsPerKey
      );
    },

    incrementPopupCount: function (popupKey) {
      this.activePopups[popupKey] = (this.activePopups[popupKey] || 0) + 1;
    },

    decrementPopupCount: function (popupKey) {
      if (this.activePopups[popupKey]) {
        this.activePopups[popupKey]--;
        if (this.activePopups[popupKey] <= 0) {
          delete this.activePopups[popupKey];
        }
      }
    },
  };

  function extractPart(titleText) {
    let match = titleText.match(/Part (\d+)/i);
    return match ? match[1] : "";
  }

  function extractDivision(titleText) {
    let match = titleText.match(/Division (\d+(\.\d+)?)/i);
    return match ? match[1] : "";
  }

  function savePinnedPopups() {
    const pinnedPopups = $(".nested-droppable .popup")
      .map(function () {
        let sectionId = $(this).attr("data-section-id");
        let categoryId = $(this).attr("data-category-id");
        let clientId = window.selectedClientId || 0;

        // Extract part and division from the popup title
        let titleText = $(this).find(".popup-title .title-text").text().trim();
        let extractedPart = extractPart(titleText);
        let extractedDivision = extractDivision(titleText);

        console.log(
          "Popup Data - Section ID:",
          sectionId,
          "Category ID:",
          categoryId,
          "Client ID:",
          clientId,
          "Part:",
          extractedPart,
          "Division:",
          extractedDivision
        );

        if (!sectionId || !categoryId) {
          console.warn("Skipping popup due to missing data:", this);
          return null; // Skip if data is missing
        }

        return {
          section_id: sectionId,
          category_id: parseInt(categoryId, 10),
          client_id: clientId,
          part: extractedPart !== "" ? extractedPart : null,
          division: extractedDivision !== "" ? extractedDivision : null,
        };
      })
      .get()
      .filter((popup) => popup !== null);

    console.log(
      "Final Data Sent to Server:",
      JSON.stringify(
        {
          action: "save",
          popups: pinnedPopups,
        },
        null,
        2
      )
    );

    $.ajax({
      url:
        BASE_URL + "/jurislocator_version_1.0/user/api/save_pinned_popups.php",
      method: "POST",
      contentType: "application/json",
      data: JSON.stringify({
        action: "save",
        popups: pinnedPopups,
      }),
      success: function (response) {
        console.log("Server response:", response);
        if (response.success) {
          Swal.fire({
            icon: "success",
            title: "Saved",
            text: `Saved ${response.saved_count} pinned popups`,
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 3000,
          });
        } else {
          console.error("Save error:", response.message);
          alert("Failed to save pinned popups.");
        }
      },
      error: function (xhr, status, error) {
        console.error("Save failed:", xhr.responseText);
        alert("Network error while saving pinned popups.");
      },
    });
  }

  function fetchPinnedPopups() {
    if (!window.selectedClientId) {
      console.warn("No client selected. Skipping popup fetch.");
      return;
    }

    $.ajax({
      url:
        BASE_URL + "/jurislocator_version_1.0/user/api/save_pinned_popups.php",
      method: "POST",
      contentType: "application/json",
      data: JSON.stringify({
        action: "fetch",
        client_id: window.selectedClientId,
      }),
      success: function (response) {
        console.log("Server Response:", response); // Debugging

        if (response.success) {
          $(".nested-droppable .popup").remove(); // Clear old pinned popups

          response.popups.forEach(function (popup) {
            console.log("Raw popup data from server:", popup);
            console.log("Popup part value:", popup.part);
            console.log("Popup division value:", popup.division);

            displayPinnedPopup(
              popup.section_id,
              popup.category_id,
              popup.part || null,
              popup.division || null
            );
          });

          // Initialize sortable functionality after loading all popups
          initializeSortable($(".nested-droppable"));

          Swal.fire({
            icon: "success",
            title: "Popups Loaded",
            text: `Loaded ${response.popups.length} pinned popups`,
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 3000,
          });
        } else {
          console.error("Fetch error:", response.message);
        }
      },
      error: function (xhr, status, error) {
        console.error("Fetch failed:", error);
        alert("Error fetching pinned popups.");
      },
    });
  }

  function displayPinnedPopup(sectionId, categoryId, part, division) {
    console.log(
      `displayPinnedPopup called with: section=${sectionId}, category=${categoryId}, part=${part}, division=${division}`
    );

    let sectionObj = {
      section_id: sectionId,
      part: part,
      division: division,
    };

    let titleText = getFullSectionIdentifier(sectionObj);
    console.log("Generated title text:", titleText);

    let popupHtml = `
            <div class="popup ui-draggable pinned" 
                data-section-id="${sectionId}" 
                data-category-id="${categoryId}" 
                data-part="${part || ""}" 
                data-division="${division || ""}"
                style="display: block; width: 100%; position: relative; top: auto; left: auto;">
                <div class="popup-title ui-draggable-handle">
                    <span class="title-text">${titleText}</span>
                    <span class="report" title="Report issue"><i class="fas fa-flag"></i></span>
                    <span class="copy" title="Copy content"><i class="fas fa-copy"></i></span>
                    <span class="arrow">▼</span>
                    <span class="close">✖</span>
                </div>
                <div class="content-body" style="width: 100%; padding: 10px; max-height: 200px;">
                    <p class="popup-content">Loading...</p>
                </div>
            </div>`;

    console.log("Appending pinned popup to .nested-droppable:", popupHtml);
    let $popup = $(popupHtml).hide(); // Initially hide to prevent layout shift

    $(".nested-droppable").append($popup);

    // Ensure attributes are correctly assigned
    $popup.attr("data-part", part || "");
    $popup.attr("data-division", division || "");

    // Initialize popup functionality (draggable, closable, content loading)
    initializePopup($popup, sectionId, categoryId, part, division);

    // Make sure draggable is disabled for pinned popups
    $popup.draggable("option", "disabled", true);

    $popup.fadeIn(300);
  }

  // Updated to include part and division in the API call
  function initializePopup($popup, sectionId, categoryId, part, division) {
    // Make the popup draggable
    $popup.draggable({
      handle: ".popup-title",
      containment: "window",
      revert: "invalid", // Snap back if dropped outside
      start: function () {
        $(this).css("z-index", ++popupZIndex);
      },
    });

    // If popup is pinned, disable draggable
    if ($popup.hasClass("pinned")) {
      $popup.draggable("option", "disabled", true);
    }

    // Load popup content dynamically
    $.ajax({
      url: BASE_URL + "/jurislocator_version_1.0/user/api/fetch_reference.php",
      method: "POST",
      data: {
        section_id: sectionId,
        category_id: categoryId,
        part: part,
        division: division,
      },
      dataType: "json",
      success: function (response) {
        if (response.error) {
          console.error("Server Error:", response.error);
          $popup.find(".popup-content").html(`<p>Error loading content.</p>`);
        } else {
          let sectionData = response.data;
          if (sectionData && sectionData.length > 0) {
            let contentHtml = generateHierarchicalContent(
              sectionData,
              categoryId
            );
            $popup.find(".popup-content").html(contentHtml);
          } else {
            $popup.find(".popup-content").html(`<p>No content available.</p>`);
          }
        }
      },
      error: function (xhr, status, error) {
        console.error("Failed to load popup content:", error);
        $popup.find(".popup-content").html(`<p>Failed to load content.</p>`);
      },
    });

    // Setup UI elements (close, copy, toggle)
    setupPopupHandlers($popup);
  }

  // Function to get the full section identifier with part and division
  function getFullSectionIdentifier(data) {
    console.log("getFullSectionIdentifier received:", data);
    let identifier = "";

    if (data.part && data.part !== "null" && data.part !== "") {
      identifier += `Part ${data.part} `;
    }

    if (data.division && data.division !== "null" && data.division !== "") {
      identifier += `Division ${data.division} `;
    }

    if (data.section_id) {
      identifier += `Section ${data.section_id}`;
    }

    let result = identifier.trim();
    console.log("Generated identifier:", result);
    return result;
  }

  function setupPopupHandlers($popup) {
    $popup
      .find(".close")
      .off("click")
      .on("click", function () {
        $popup.fadeOut(200, function () {
          $(this).remove();
        });
      });

    $popup
      .find(".arrow")
      .off("click")
      .on("click", function () {
        const $content = $popup.find(".popup-content");
        const $arrow = $(this);

        $content.slideToggle(200, function () {
          $arrow.text($content.is(":visible") ? "▼" : "▲");
        });
      });

    $popup
      .find(".copy")
      .off("click")
      .on("click", function () {
        const $copyButton = $(this);
        const contentToCopy = $popup.find(".popup-content").text().trim();

        navigator.clipboard
          .writeText(contentToCopy)
          .then(function () {
            alert("Content copied to clipboard.");
          })
          .catch(function (err) {
            console.error("Failed to copy text:", err);
            alert("Failed to copy text. Please try again.");
          });
      });

    $popup
      .find(".report")
      .off("click")
      .on("click", function () {
        const popupTitle = $popup.find(".title-text").text();
        const sectionId = $popup.data("section-id");
        const categoryId = $popup.data("category-id");

        $.ajax({
          url:
            BASE_URL +
            "/jurislocator_version_1.0/user/api/save_popup_report.php",
          method: "POST",
          contentType: "application/json",
          data: JSON.stringify({
            popup_title: popupTitle,
            section_id: sectionId,
            category_id: categoryId,
          }),
          success: function (response) {
            if (response.success) {
              showSuccessMessage("Issue reported successfully!");
            } else {
              handleError(response.message || "Failed to submit report");
            }
          },
          error: function (xhr, status, error) {
            handleError("Error submitting report: " + error);
          },
        });
      });

    $popup.find(".popup-title").on("mousedown", function () {
      $($popup).css("z-index", ++popupZIndex);
    });
  }

  // New function to initialize sortable functionality
  function initializeSortable($container) {
    $container
      .sortable({
        items: ".popup",
        handle: ".popup-title",
        placeholder: "ui-state-highlight",
        forcePlaceholderSize: true,
        update: function () {
          console.log("Popup order updated.");
          // You might want to save the new order here
        },
      })
      .sortable("refresh");
  }

  function makeDroppable($container) {
    $container.droppable({
      accept: ".popup",
      hoverClass: "ui-state-highlight",
      drop: function (event, ui) {
        var $this = $(this);
        var $droppedPopup = ui.helper;

        // Check if already pinned
        if (!$droppedPopup.hasClass("pinned")) {
          $this.append($droppedPopup);
          $droppedPopup
            .css({
              position: "relative",
              top: "auto",
              left: "auto",
              width: "100%",
            })
            .addClass("pinned");

          // Disable dragging after being pinned
          $droppedPopup.draggable("option", "disabled", true);
        }

        // Initialize sortable after a manual drop
        initializeSortable($this);
      },
    });
  }

  // Event listeners
  $(document).on("click", "#save-pinned-popups", savePinnedPopups);
  $(document).on("click", "#fetch-pinned-popups", fetchPinnedPopups);

  // Auto-fetch popups when a client is selected
  $(document).on("clientSelected", function () {
    fetchPinnedPopups();
  });

  // Update the droppable area HTML to include save and fetch buttons
  $(document).ready(function () {
    // Modify the droppable area HTML
    $("#drag-area-right .card-body").prepend(`
            <div class="droppable-controls d-flex justify-content-between mb-2">
                <div>
                    <button id="save-pinned-popups" class="btn btn-save btn-sm btn-primary mr-2">
                        <i class="fas fa-save"></i> Save Popups
                    </button>
                    <button id="fetch-pinned-popups" class="btn btn-fetch btn-sm btn-secondary">
                        <i class="fas fa-download"></i> Fetch Popups
                    </button>
                </div>
                <button id="clear-pinned-popups" class="btn btn-clear btn-sm btn-danger">
                    <i class="fas fa-trash"></i> Clear Popups
                </button>
            </div>
        `);

    // Add clear popups functionality
    $(document).on("click", "#clear-pinned-popups", function () {
      $(".nested-droppable .popup").remove();

      // Optional: Clear from server-side as well
      $.ajax({
        url:
          BASE_URL +
          "/jurislocator_version_1.0/user/api/save_pinned_popups.php",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify({
          action: "clear",
        }),
        success: function (response) {
          if (response.success) {
            Swal.fire({
              icon: "success",
              title: "Cleared",
              text: "All pinned popups have been removed",
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 3000,
            });
          }
        },
      });
    });

    // Automatically fetch pinned popups when a client is selected
    $(document).on("clientSelected", function () {
      fetchPinnedPopups();
    });
  });

  // Extend existing droppable functionality
  $(".nested-droppable").droppable({
    accept: ".popup",
    hoverClass: "ui-state-highlight",
    drop: function (event, ui) {
      var $this = $(this);
      if (!ui.helper.hasClass("pinned")) {
        $this.append(ui.helper);
        ui.helper
          .css({
            position: "relative",
            top: "auto",
            left: "auto",
            width: "100%",
          })
          .addClass("pinned");
        ui.helper.draggable("option", "disabled", true);
      }
      $this
        .sortable({
          items: ".popup",
          handle: ".popup-title",
          placeholder: "ui-state-highlight",
          forcePlaceholderSize: true,
          update: function () {
            ui.item.css({
              width: "100%",
              position: "relative",
              top: "auto",
              left: "auto",
            });
            console.log("Popup order updated.");
          },
        })
        .sortable("refresh");
    },
  });

  function showSuccessMessage(message) {
    const $successMessage = $("#success-message");
    if (!$successMessage.length) {
      $("<div>", {
        id: "success-message",
        text: message,
        style:
          "display:none; position:fixed; top:20px; left:50%; transform:translateX(-50%); background-color:#4CAF50; color:white; padding:10px 20px; border-radius:4px; z-index:9999;",
      })
        .appendTo("body")
        .fadeIn(200)
        .delay(1500)
        .fadeOut(200);
    } else {
      $successMessage.text(message).fadeIn(200).delay(1500).fadeOut(200);
    }
  }

  function handleError(error) {
    console.error("Operation failed:", error);
    alert("Operation failed. Please try again.");
  }

  // Main click handler for references
  $(document).on("click", ".ref:not(.popup-content .ref)", function (e) {
    e.preventDefault();
    const sectionId = $(this).data("section-id");
    // Get the category ID and act name from data attributes
    const categoryId = $(this).data("category-id") || 1;
    const actName = $(this).data("act-name");
    const mouseX = e.pageX;
    const mouseY = e.pageY;

    if (!sectionId) {
      console.error("No section ID found");
      return;
    }

    fetchAndDisplayPopup(sectionId, categoryId, mouseX, mouseY, actName);
  });

  // Separate handler for nested references
  $(document).on("click", ".popup-content .ref", function (e) {
    e.preventDefault();
    e.stopPropagation();

    const sectionId = $(this).data("section-id");
    // Get the category ID from data attribute, with a default of 1 only for non-cross-act refs
    const isXRef = $(this).hasClass("cross-act-ref");
    const categoryId = $(this).data("category-id") || (isXRef ? null : 1);
    const mouseX = e.pageX;
    const mouseY = e.pageY;

    if (!sectionId) {
      console.error("No section ID found for nested reference");
      return;
    }

    fetchAndDisplayPopup(sectionId, categoryId, mouseX, mouseY);
  });

  // Ensure makeLinksClickable function is defined similarly to other references
  function makeLinksClickable(text, categoryId) {
    // Create a map to track processed positions in the text
    let processedPositions = new Set();

    // PRIORITY 1: Handle cross-act references first
    text = text.replace(
      /\b(subsection|section|paragraph)\s+(\d+(?:\.\d+)?(?:\([^)]+\))*)\s*\(([^)]*?(?:Immigration Division Rules|Division Rules|Immigration and Refugee Protection Act|Rules|Act|Regulations)[^)]*)\)/gi,
      function (match, type, sectionId, actName, offset) {
        // Mark this range as processed
        for (let i = offset; i < offset + match.length; i++) {
          processedPositions.add(i);
        }

        const fullRef = sectionId.trim() + "(" + actName.trim() + ")";
        // Make only the section reference part clickable
        return (
          '<span class="ref cross-act-ref" ' +
          'data-section-id="' +
          sectionId.trim() +
          '" ' +
          'data-act-name="' +
          actName.trim() +
          '">' +
          type +
          " " +
          sectionId.trim() +
          "</span> (" +
          actName.trim() +
          ")"
        );
      }
    );

    // Handle regular section references, but only for unprocessed matches
    let lastIndex = 0;
    let result = "";
    const regularRefRegex = /\b(\d+(?:\.\d+)?(?:\([^)]+\))*)\b/g;
    let match;

    while ((match = regularRefRegex.exec(text)) !== null) {
      const start = match.index;
      const end = start + match[0].length;

      // Check if this match overlaps with any processed positions
      let isProcessed = false;
      for (let i = start; i < end; i++) {
        if (processedPositions.has(i)) {
          isProcessed = true;
          break;
        }
      }

      if (!isProcessed) {
        result += text.slice(lastIndex, start);
        result +=
          '<span class="ref" data-section-id="' +
          match[0] +
          '" data-category-id="' +
          categoryId +
          '">' +
          match[0] +
          "</span>";
      } else {
        result += text.slice(lastIndex, end);
      }
      lastIndex = end;
    }

    result += text.slice(lastIndex);
    return result;
  }

  function setupNestedPopups(popup) {
    popup.find(".ref").on("click", function (e) {
      e.preventDefault();
      console.log("Nested reference clicked");

      // Check if this is an unmatched reference
      const isUnmatchedRef = $(this).hasClass("unmatched-ref");
      const sectionId = $(this).data("section-id");
      const categoryId = $(this).data("category-id");
      const mouseX = e.pageX;
      const mouseY = e.pageY;

      if (isUnmatchedRef) {
        // For unmatched references, fetch using ref_id
        $.ajax({
          url: BASE_URL + "/api/fetch_unmatched_reference.php",
          method: "POST",
          data: { ref_id: sectionId },
          dataType: "json",
          success: function (data) {
            if (data.error) {
              console.error("Server Error:", data.error, data.details);
              alert("Unable to fetch reference: " + data.error);
            } else {
              displayUnmatchedPopup(data, mouseX, mouseY);
            }
          },
          error: function (xhr, status, error) {
            console.error("Ajax request failed:", status, error);
            try {
              var errorData = JSON.parse(xhr.responseText);
              alert("Error: " + (errorData.error || "Unknown error"));
            } catch (e) {
              alert("An unexpected error occurred");
            }
          },
        });
      } else {
        // For regular references
        fetchAndDisplayPopup(sectionId, categoryId, mouseX, mouseY);
      }
    });
  }

  function displayUnmatchedPopup(refInfo, mouseX, mouseY) {
    if (!refInfo || !refInfo.content) {
      console.error("Invalid unmatched reference data:", refInfo);
      alert("Unable to display reference content.");
      return;
    }

    var popup = $("#popup-template").clone().removeAttr("id");

    // Improve title generation
    var titleText = refInfo.full_path || "Unmatched Reference";
    popup.find(".title-text").text(titleText);

    // Use makeLinksClickable with fallback category
    var processedContent = makeLinksClickable(
      refInfo.content || "No content available",
      refInfo.category_id || 1
    );

    popup.find(".popup-content").html(processedContent);

    popup.css({
      top: mouseY + 10 + "px",
      left: mouseX + 10 + "px",
      zIndex: ++popupZIndex,
      display: "block",
    });

    $("body").append(popup);
    makeDraggable(popup);

    // Updated nested reference handling
    setupNestedPopups(popup);

    // Existing popup setup handlers
    setupPopupHandlers(popup);

    console.log("Unmatched popup display complete");
  }

  // Add a general click handler for any unmatched references
  $(document).on("click", ".ref.unmatched-ref", function (e) {
    e.preventDefault();
    const sectionId = $(this).data("section-id");
    const mouseX = e.pageX;
    const mouseY = e.pageY;

    if (!sectionId) {
      console.error("No section ID found for unmatched reference");
      return;
    }

    fetchUnmatchedReference(sectionId, mouseX, mouseY);
  });

  // Existing click handler for unmatched references
  $(document).on("click", "custom-ref.unmatched-ref", function (e) {
    e.preventDefault();
    var refId = $(this).data("ref-id");
    var mouseX = e.pageX;
    var mouseY = e.pageY;

    $.ajax({
      url: BASE_URL + "/api/fetch_unmatched_reference.php",
      method: "POST",
      data: { ref_id: refId },
      dataType: "json",
      success: function (data) {
        if (data.error) {
          console.error("Server Error:", data.error, data.details);
          alert("Unable to fetch reference: " + data.error);
        } else {
          displayUnmatchedPopup(data, mouseX, mouseY);
        }
      },
      error: function (xhr, status, error) {
        console.error("Ajax request failed:", status, error);
        console.error("Response Text:", xhr.responseText);

        try {
          var errorData = JSON.parse(xhr.responseText);
          alert("Error: " + (errorData.error || "Unknown error"));
        } catch (e) {
          alert("An unexpected error occurred");
        }
      },
    });
  });

  function fetchAndDisplayPopup(sectionId, categoryId, mouseX, mouseY) {
    if (!sectionId) {
      console.error("Error: Missing section ID.");
      return;
    }

    // Create a unique popup identifier based on sectionId and categoryId
    var popupKey = sectionId + "-" + (categoryId || "cross");

    // Check if this popup is already open
    if (openedPopups.has(popupKey)) {
      return; // Skip if already open
    }

    // Add to tracking set
    openedPopups.add(popupKey);

    $.ajax({
      url: BASE_URL + "/jurislocator_version_1.0/user/api/fetch_reference.php",
      method: "POST",
      data: {
        section_id: sectionId,
        category_id: categoryId,
      },
      dataType: "json",
      success: function (response) {
        try {
          if (response.error) {
            console.error("Server Error:", response.error);
            // Fallback to unmatched reference if regular fetch fails
            fetchUnmatchedReference(sectionId, mouseX, mouseY);
            return;
          }

          var sectionData = response.data;
          if (sectionData && sectionData.length > 0) {
            // Fix: Ensure footnotes are properly decoded
            sectionData.forEach(function (section) {
              if (section.footnote) {
                section.footnote = $("<div>").html(section.footnote).text(); // Decodes HTML entities
              }
            });

            displayPopup(sectionData, mouseX, mouseY);
          } else {
            fetchUnmatchedReference(sectionId, mouseX, mouseY);
          }
        } catch (e) {
          console.error("Error processing reference:", e);
          fetchUnmatchedReference(sectionId, mouseX, mouseY);
        }
      },
      error: function (xhr, status, error) {
        console.error("Ajax request failed:", error);
        console.error("Response Text:", xhr.responseText);
        fetchUnmatchedReference(sectionId, mouseX, mouseY);
      },
    });
  }

  function displayPopup(sectionData, mouseX, mouseY) {
    const mainSection = sectionData[0];
    const popupKey = mainSection.section_id + "-" + mainSection.category_id;

    // Check if we can open this popup
    if (!canOpenPopup(popupKey)) return;

    // Create and show the popup
    const $popup = $("#popup-template").clone().removeAttr("id");

    const titleText = getFullSectionIdentifier(mainSection);

    // Create the popup title bar with report icon
    const titleHtml = `
      <div class="popup-title">
        <span class="title-text">${titleText}</span>
        <span class="report" title="Report issue"><i class="fas fa-flag"></i></span>
        <span class="copy" title="Copy content"><i class="fas fa-copy"></i></span>
        <span class="arrow">▼</span>
        <span class="close">✖</span>
      </div>
    `;

    // Replace the existing title with our new one
    $popup.find(".popup-title").replaceWith(titleHtml);

    $popup
      .find(".popup-content")
      .html(generateHierarchicalContent(sectionData, mainSection.category_id));

    // Missing attributes: Ensure section_id and category_id are added
    $popup.attr("data-section-id", mainSection.section_id);
    $popup.attr("data-category-id", mainSection.category_id);

    $popup.css({
      top: mouseY + 10 + "px",
      left: mouseX + 10 + "px",
      zIndex: ++popupZIndex,
      display: "block",
    });

    $("body").append($popup);
    makeDraggable($popup);

    setupPopupHandlers($popup, popupKey);

    // Increment counter AFTER confirming popup is shown
    activePopups[popupKey] = (activePopups[popupKey] || 0) + 1;

    console.log(`Popup ${popupKey} opened ${activePopups[popupKey]} time(s)`);
  }

  function getFullSectionIdentifier(section) {
    let identifier = "";
    if (section.part) identifier += "Part " + section.part + " ";
    if (section.division) identifier += "Division " + section.division + " ";
    if (section.section_id) identifier += "Section " + section.section_id;
    return identifier.trim();
  }

  function generateHierarchicalContent(sectionData, categoryId) {
    var content = "";
    sectionData.forEach(function (section) {
      var sectionClass = getSectionClass(section);
      content += "<div class='" + sectionClass + "'>";

      // Include source table information in the content if from a different act
      if (section.from_other_category === 1) {
        content +=
          "<div class='source-info'>" + section.source_table + "</div>";
      }

      if (section.section_id) {
        content += "<h4>" + section.title + "</h4>";
        content +=
          "<p>" +
          makeLinksClickable(section.text_content, section.category_id) +
          "</p>";
      } else {
        content += "<h4>" + section.title + "</h4>";
        content +=
          "<p>" +
          makeLinksClickable(section.text_content, section.category_id) +
          "</p>";
      }

      // Fix: Add footnote display
      if (section.footnote) {
        content += "<p class='footnote'>" + section.footnote + "</p>";
      }

      content += "</div>";
    });
    return content;
  }

  // Track opened popups to prevent duplicates
  let openedPopups = new Set();

  function makeLinksClickable(text, categoryId) {
    // Create a map to track processed positions in the text
    let processedPositions = new Set();

    // PRIORITY 1: Handle cross-act references first
    text = text.replace(
      /\b(subsection|section|paragraph)\s+(\d+(?:\.\d+)?(?:\([^)]+\))*)\s*\(([^)]*?(?:Immigration Division Rules|Division Rules|Immigration and Refugee Protection Act|Rules|Act|Regulations)[^)]*)\)/gi,
      function (match, type, sectionId, actName, offset) {
        // Mark this range as processed
        for (let i = offset; i < offset + match.length; i++) {
          processedPositions.add(i);
        }

        const fullRef = sectionId.trim() + "(" + actName.trim() + ")";
        // Make only the section reference part clickable
        return (
          '<span class="ref cross-act-ref" ' +
          'data-section-id="' +
          sectionId.trim() +
          '" ' +
          'data-act-name="' +
          actName.trim() +
          '">' +
          type +
          " " +
          sectionId.trim() +
          "</span> (" +
          actName.trim() +
          ")"
        );
      }
    );

    // Handle regular section references, but only for unprocessed matches
    let lastIndex = 0;
    let result = "";
    const regularRefRegex = /\b(\d+(?:\.\d+)?(?:\([^)]+\))*)\b/g;
    let match;

    while ((match = regularRefRegex.exec(text)) !== null) {
      const start = match.index;
      const end = start + match[0].length;

      // Check if this match overlaps with any processed positions
      let isProcessed = false;
      for (let i = start; i < end; i++) {
        if (processedPositions.has(i)) {
          isProcessed = true;
          break;
        }
      }

      if (!isProcessed) {
        result += text.slice(lastIndex, start);
        result +=
          '<span class="ref" data-section-id="' +
          match[0] +
          '" data-category-id="' +
          categoryId +
          '">' +
          match[0] +
          "</span>";
      } else {
        result += text.slice(lastIndex, end);
      }
      lastIndex = end;
    }

    result += text.slice(lastIndex);
    return result;
  }

  function getSectionClass(section) {
    if (section.sub_paragraph) return "subparagraph";
    if (section.paragraph) return "paragraph";
    if (section.sub_section) return "subsection";
    return "section";
  }

  //advanced searching script
  $(document).ready(function () {
    function initializeSelect2() {
      // Initialize Select2 for multi-select fields
      $(".select2Multiselect").select2({
        allowClear: true,
        width: "100%",
      });
    }

    // Function to get URL parameter
    function getUrlParameter(name) {
      name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
      var results = regex.exec(location.search);
      return results === null ? "" : decodeURIComponent(results[1]);
    }

    // Function to update current category ID based on URL parameter
    function updateCurrentCategory() {
      var currentCategoryId = getUrlParameter("category_id");

      if (currentCategoryId) {
        // Ensure it's a valid number
        if (/^\d+$/.test(currentCategoryId)) {
          $("#current-table").val(currentCategoryId);
        } else {
          // Handle cases with multiple category IDs (comma-separated)
          const firstCategoryId = currentCategoryId.split(",")[0];
          $("#current-table").val(firstCategoryId);
          console.warn(
            "Multiple categories detected, using first:",
            firstCategoryId
          );
        }
      }
    }

    // Fetch and populate act names
    function populateActNames() {
      $.ajax({
        url:
          BASE_URL +
          "/jurislocator_version_1.0/user/api/search.php?get_act_names=1",
        method: "GET",
        dataType: "json",
        success: function (actNames) {
          const actNameSelect = $("#act-names-select");
          actNameSelect.empty();

          // Filter out null or empty values
          const validActNames = actNames.filter(function (actName) {
            return actName !== null && actName.trim() !== "";
          });

          // Create an option for each valid act name
          validActNames.forEach(function (actName) {
            actNameSelect.append(
              `<option value="${actName}">${actName}</option>`
            );
          });

          // Initialize Select2 after populating the select element
          initializeSelect2();
        },
        error: function () {
          console.error("Failed to fetch act names");
        },
      });
    }

    // Call this function when the page loads
    updateCurrentCategory();
    populateActNames();

    // Search form submission handler
    const loadingContainer = $(".loading-container");
    const advancedSearchBtn = document.getElementById("advanced-search-btn");
    const advancedSearchContainer = document.querySelector(
      ".advanced-search-container"
    );
    let searchTimeout;

    // Toggle between basic and advanced search
    advancedSearchBtn.addEventListener("click", () => {
      const basicSearchContainer = document.getElementById(
        "basic-search-container"
      );
      basicSearchContainer.classList.add("d-none");
      advancedSearchContainer.classList.remove("d-none");

      // Ensure first checkbox is checked by default
      $("#act-names-container input:first").prop("checked", true);
    });

    // Back to basic search
    $(document).on("click", "#basic-search-btn", function () {
      const basicSearchContainer = $("#basic-search-container");
      const advancedSearchContainer = $(".advanced-search-container");

      basicSearchContainer.removeClass("d-none");
      advancedSearchContainer.addClass("d-none");
    });

    // Basic Search form submission handler
    $("#search-form").on("submit", function (e) {
      e.preventDefault();

      // Get basic search criteria
      var keyword = $("#keyword").val();

      if (!keyword.trim()) {
        alert("Please enter a keyword to search.");
        $("#keyword").focus();
        return;
      }

      var currentOnly = $("#current-only").is(":checked") ? 1 : 0;
      var currentCategoryId = $("#current-table").val();
      var table = currentOnly ? currentCategoryId : "all";

      // Show loading animation
      loadingContainer.addClass("active");

      // Clear previous timeout if exists
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }

      // Add minimum loading time for better UX
      searchTimeout = setTimeout(function () {
        $.ajax({
          url: BASE_URL + "/jurislocator_version_1.0/user/api/search.php",
          method: "POST",
          data: {
            keyword: keyword,
            table: table,
            current_only: currentOnly,
          },
          success: function (response) {
            // Hide loading animation
            loadingContainer.removeClass("active");

            // Update content with animation
            $("#content").html(response);

            // Add sequential animation to act containers
            $(".act-container").each(function (index) {
              $(this).css("animation-delay", `${0.1 * (index + 1)}s`);
            });

            // Initialize any additional functionality
            if (typeof initializePopups === "function") {
              initializePopups();
            }
          },
          error: function (xhr, status, error) {
            // Hide loading animation
            loadingContainer.removeClass("active");

            console.error("Search Error:", status, error);
            alert("An error occurred while searching. Please try again.");
          },
        });
      }, 800);
    });

    // Advanced search form submission handler
    $("#advanced-search-form").on("submit", function (e) {
      e.preventDefault();

      // Get advanced search criteria
      var keyword = $("#advanced-keyword").val();
      var exactPhrase = $("#exact-phrase").val();
      var withTheseWords = $("#with-these-words").val();
      var exceptTheseWords = $("#except-these-words").val();
      var title = $("#title-search").val();
      var section = $("#section-search").val();
      var subSection = $("#sub-section-search").val();

      // Get selected act names/tables
      var selectedTables = $("#act-names-select").val(); // Retrieves an array of selected values

      var isAnyFieldFilled =
        keyword.trim() ||
        exactPhrase.trim() ||
        withTheseWords.trim() ||
        exceptTheseWords.trim() ||
        title.trim() ||
        section.trim() ||
        subSection.trim() ||
        (selectedTables && selectedTables.length > 0);

      if (!isAnyFieldFilled) {
        alert("Please fill at least one search field.");
        $("#advanced-keyword").focus();
        return;
      }

      // Show loading animation
      loadingContainer.addClass("active");

      // Clear previous timeout if exists
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }

      // Add minimum loading time for better UX
      searchTimeout = setTimeout(function () {
        $.ajax({
          url: BASE_URL + "/jurislocator_version_1.0/user/api/search.php",
          method: "POST",
          data: {
            keyword: keyword,
            exact_phrase: exactPhrase,
            with_these_words: withTheseWords,
            except_these_words: exceptTheseWords,
            title: title,
            section: section,
            sub_section: subSection,
            selected_tables: selectedTables, // Pass the array of selected tables
          },
          success: function (response) {
            // Hide loading animation
            loadingContainer.removeClass("active");

            // Update content with animation
            $("#content").html(response);

            // Add sequential animation to act containers
            $(".act-container").each(function (index) {
              $(this).css("animation-delay", `${0.1 * (index + 1)}s`);
            });

            // Initialize any additional functionality
            if (typeof initializePopups === "function") {
              initializePopups();
            }
          },
          error: function (xhr, status, error) {
            loadingContainer.removeClass("active");
            console.error("Search Error:", xhr.responseText || status, error);
            alert("An error occurred while searching. Please try again.");
          },
        });
      }, 800);
    });

    // Optional: Add keyboard shortcut for search
    $(document).keydown(function (e) {
      if (e.ctrlKey && e.key === "f") {
        e.preventDefault();
        $("#keyword").focus();
      }
    });

    // Optional: Handle changes in URL without page reload
    $(window).on("popstate", function () {
      updateCurrentCategory();
    });
  });

  function setupPopupHandlers(popup, popupKey) {
    popup
      .find(".close")
      .off("click")
      .on("click", function () {
        // Get the popup identifier before removing
        const sectionId = popup.attr("data-section-id");
        const categoryId = popup.attr("data-category-id") || "cross";
        const popupKey = sectionId + "-" + categoryId;

        // Remove from tracking set
        openedPopups.delete(popupKey);

        // Remove the popup
        popup.remove();
      });

    popup
      .find(".arrow")
      .off("click")
      .on("click", function () {
        const $content = popup.find(".popup-content");
        const $arrow = $(this);

        $content.slideToggle(200, function () {
          $arrow.text($content.is(":visible") ? "▼" : "▲");
        });
      });

    // Copy handler - Fixed with proper content formatting and feedback
    popup
      .find(".copy")
      .off("click")
      .on("click", function () {
        const $copyButton = $(this);
        const contentToCopy = getFormattedContent(popup);

        navigator.clipboard
          .writeText(contentToCopy)
          .then(function () {
            // Visual feedback
            $copyButton.addClass("copied");

            // Create and show feedback message
            const $feedback = $("<div>")
              .addClass("copy-feedback")
              .text("Copied!")
              .css({
                position: "absolute",
                right: "40px",
                top: "5px",
                background: "#4CAF50",
                color: "white",
                padding: "4px 8px",
                borderRadius: "4px",
                fontSize: "12px",
                opacity: "0",
                transition: "opacity 0.2s",
              })
              .appendTo($copyButton.parent());

            // Animate feedback
            setTimeout(() => $feedback.css("opacity", "1"), 50);
            setTimeout(() => {
              $feedback.css("opacity", "0");
              setTimeout(() => {
                $feedback.remove();
                $copyButton.removeClass("copied");
              }, 200);
            }, 1500);
          })
          .catch(function (err) {
            console.error("Failed to copy text:", err);
            alert("Failed to copy text. Please try again.");
          });
      });

    popup
      .find(".report")
      .off("click")
      .on("click", function () {
        const popupTitle = popup.find(".title-text").text();
        const sectionId = popup.data("section-id");
        const categoryId = popup.data("category-id");

        $.ajax({
          url:
            BASE_URL +
            "/jurislocator_version_1.0/user/api/save_popup_report.php",
          method: "POST",
          contentType: "application/json",
          data: JSON.stringify({
            popup_title: popupTitle,
            section_id: sectionId,
            category_id: categoryId,
          }),
          success: function (response) {
            if (response.success) {
              showSuccessMessage("Issue reported successfully!");
            } else {
              handleError(response.message || "Failed to submit report");
            }
          },
          error: function (xhr, status, error) {
            handleError("Error submitting report: " + error);
          },
        });
      });
  }

  function initializePopups() {
    $(".search-result").each(function () {
      var sectionId = $(this).data("section-id");
      var categoryId = $(this).data("category-id");
      $(this).on("click", function (e) {
        e.preventDefault();
        var popupKey = sectionId + "-" + categoryId;
        if (!activePopups[popupKey]) {
          var mouseX = e.pageX;
          var mouseY = e.pageY;
          fetchAndDisplayPopup(sectionId, categoryId, mouseX, mouseY);
        }
      });
    });
  }

  // Function to get the formatted content of a popup
  function getFormattedContent(popup) {
    const titleText = popup.find(".title-text").text().trim();
    const contentText = popup
      .find(".popup-content")      .clone() // Clone the element
      .find("script")
      .remove()
      .end() // Remove any script tags
      .text() // Get the text content
      .trim() // Remove leading/trailing whitespace
      .replace(/\s+/g, " "); // Normalize whitespace

    return `${titleText}\n\n${contentText}`;
  }
  const $sidebarToggle = $(".sidebar-toggle");
  const $sidebar = $(".sidebar");
  const $mainContent = $(".main-content");
});
    </script>
@endsection
